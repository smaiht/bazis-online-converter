Action.LoadModel('results/model.b3d');
system.sleep(500);

let fs = require('fs');

const sys_mats = {
    "isMask": "c0c04c47-1874-493a-b604-87372bc9dcf9",
    "fake_shadow": "9c341587-0cb6-4941-9ab1-f6a90b449166",
    "ruler_color": "895d1763-ab50-4965-be73-f1604944d66f",
    "RGB transparent": "68896900-2147-4c14-a3c3-92daee7384fe",
    "Шпон Дуб": "b73b38dd-6212-4a5c-9503-33b12ae8de5f",
    "Шпон Венге ": "b04625f5-7245-4c87-b9f2-45de17c5bf2e",
    "Шпон Орех": "b94489a6-5ef8-4351-9a78-d24cd19e3ea7",
    " МДФ серый": "bb785cc8-2916-44f9-8556-1a20e940fff7",
    "МДФ светлый": "426098b0-7755-4643-a3f1-b409d0f3b867",
    "Массив Дуб": "cdda7036-8b8d-44cf-ac53-0f38ca54e1b8",
    "Массив Ольха": "cc68a618-11f4-4d26-9a53-29213d1d272a",
    "Фанера": "d096ec81-277e-49ed-ab4b-d2b34962ba8d",
    "Фанера светлая": "7d8f00d5-c106-4102-a196-7ef6704463ab",
    "Кожа шоколадная": "6129a6db-215a-40e5-bc6f-a5d3b4ba7856",
    "Синяя кожа": "40a71b6e-86bf-435f-8e93-ff99aca3ef7c",
    "Черная кожа": "e49a3fc1-852c-4037-a096-6e03b489cd63",
    "Бежевая кожа": "f54a9eeb-f523-4c1d-8196-19ffc58b3846",
    "Красная кожа": "d92c27c5-b6cc-4808-a4da-2b1984c0f28c",
    "Коричневая кожа": "fef38c2b-5cc5-417d-bc1c-40be3b515606",
    "Дуб": "7ddb7a2b-016a-4032-9faa-4bfde223616c",
    "Белое дерево_глян": "d9f4225c-0687-433d-9df2-eeb1c24cdab3",
    "Дерево Раковина Ванная Лофт": "a92ab703-a337-48d2-ad57-26c9acd2250c",
    "Ясень": "8ec9f15a-5170-44dc-b809-a5311a655759",
    "Ель": "2e58363d-8f90-44bc-899e-48972b937f33",
    "Орех темный": "36440589-8fbf-4218-bad4-104450d80a73",
    "Дерево кофейное": "194be3a9-d32c-43fa-9501-aaf70290663e",
    "Ясень бежевый": "3758e064-fdf5-4c8c-b04d-afc5ac72bb4c",
    "Wood_Dark": "2419de4c-51df-420e-8bfe-cdf050bd148b",
    "Wood_Light": "41528bd0-dad3-4885-a331-12d153d0012e",
    "Базис Стандарт": "2381385d-91bb-47fa-8925-df8d0f2dd0bd",
    "Стекло красное PBR": "bcd9027d-19db-4c6d-9d4a-37ce89da1434",
    "redGlass": "5bf33e18-e8d3-4dec-8145-c612ab5a2a45",
    "Полупрозрачное зеленое стекло": "6383f505-05f1-49b2-892e-58f0cc44e2a6",
    "стекло матовое": "53d543a0-3af0-484a-9232-6a439fb808a9",
    "стекло темное": "b27bb3b3-47d0-4ae5-9614-5ff2c71fb058",
    "Jk_dn_Glass": "46b81a2f-2c9e-4465-8bc9-92a577f55b9b",
    "Лед": "aa8b4dbb-6d20-4b6c-af49-f199e1248a68",
    "Черное непрозрачное": "6c80b3d8-b0e0-4c61-a438-f74ccc8895fa",
    " Стекло прозрачное 2": "621635ec-20d3-4327-96bf-3f1dd3016354",
    "green_glass": "ee11711d-1032-425b-bc73-b1b3ff0903cd",
    "Стекло часы": "4afd1adf-f7c7-47e7-9902-0c083209ac96",
    " Стекло прозрачное 3": "bded9668-741f-40c4-96a0-23d6b4320e5f",
    "Стекло черное": "bfdec2d3-a922-4731-8021-7eae39ad6cbb",
    "milk_glass": "eb99af06-0802-444b-af16-df940e2012e3",
    "темно-серое непрозрачное": "a016ef00-29ed-4849-8c2b-9e810a7e61f3",
    "Белесое стекло": "5b8cce75-3cd1-44de-8f5b-6f62f23b294c",
    "milk_matte_glass": "be4fbc98-c031-49f1-aee5-e4ca52a05cc7",
    "Стекло темное": "e6f0fcb4-a60a-43bc-b09f-b695aff80028",
    "Стекло темно-зеленое": "64206638-6007-42fd-8920-f3031f2ccc91",
    "Стекло желтое": "1dfd275b-7bd4-4bd9-a5e8-857f34c0079e",
    "Стекло красное": "d346dc75-905b-40c0-92f2-0aef53cacbc0",
    "Стекло узорное матовое": "c33a5ffc-0728-451f-9581-a867f80e557c",
    "Алмаз": "bdccab05-08cc-4844-ace1-5a27b6298ca4",
    "Стекло прозрачное": "d5d46aa4-29ab-455d-b8b3-2cd9efca87ff",
    "green_glass_rough": "727fd117-2da1-4465-b37b-9a7aaa92a7c5",
    "Хром": "aab79401-80ae-4275-ae4a-2bf2bbcff9ab",
    "Металл матовый": "014a7e9e-2e0f-4bb1-9a01-20a0cf74fa85",
    "Металл Глянцевый": "5f81f6f3-86af-4744-90f2-69ef28c328d2",
    "Металл матовый белый": "c3625b94-dfa3-4fb7-a953-5f4551bb10c4",
    "Металл матовый черный": "f8c764fc-d360-4428-a2ac-f24b8af340c2",
    "Металл шагрень синий": "e007e43c-c6eb-48be-af1a-de5ce471e8ea",
    "Золото матовое": "a349b1da-2360-4db2-b3c4-8d9205c2429c",
    "Бронза": "6000dc74-daa9-44a1-9774-89d4a1e6e2b8",
    "хром золотой": "1d7e7403-8b2a-4788-9fb2-9e2f3130e8af",
    "Металл серебристый": "c7ce90cc-97bc-4c6b-93b8-2d1b432e8f6e",
    "Металл полуматовый черный": "c0876ab5-b4b6-4b6d-9171-e2701b8166ad",
    "Металл гладкий": "4dcacb19-6e47-4e1b-bfe5-4ee313e1a36d",
    "Металл шагрень темный": "4f11b2ba-84b0-47c9-b382-d6ec5d774813",
    "Металл матовый синий": "53c3dd2d-59de-44c7-a132-8a3b1c3d698b",
    "Металл шагрень черный": "62a335a6-eee3-47d5-bc12-a88daa658e0d",
    "Чугун": "f1cfa09f-aa2d-4077-bfd4-e2175c96c7fc",
    "Алюминий шлифованный": "61786663-f404-47bc-9261-92ad37f20278",
    "Металл глянец с дефектами": "21d2c825-77d8-483c-9eac-2832af56b24b",
    "Металлическая сетка": "c69a2794-a1f0-41c6-a1c5-61594a8f3f83",
    "Золото": "8fd5c84b-cf73-45c0-9563-e2c01a4d4ae9",
    "Серебро": "daa90b1c-8dc2-40c4-9044-8bac9aa00499",
    "Ткань1": "81aadfcf-e9bc-48bb-9ebd-144d3ea6da39",
    "Велюр шоколадный": "1d3b9e68-3c87-4eeb-9eb4-0f9e19682e46",
    "Материал восстановленный": "d70cbe91-a20b-4e89-a136-4baa4da986af",
    "Ткань плотная": "eb44f710-9d6f-48c9-9177-df5486872d3d",
    "Хлопок": "31a2c2f1-5185-4824-aaab-66d28735e2ab",
    "Велюр белый": "1d3c514b-bae4-4cb4-9b8a-840854f2a9f7",
    "Рогожка бежевая": "3a5533de-aac2-4d2f-8adb-8da91806bd69",
    "Серый велюр": "62dba25e-a2f3-434a-b351-c45f6fe335fa",
    "вода": "a5071ff5-10ac-4c57-a916-cc59c4c04673",
    "Пластик голубой": "a8ebccf2-dbb6-404e-a904-2818fed6690c",
    "Пластик черный": "30f278fb-a547-4b23-835e-601f0dbc0dd6",
    "Пластик белый": "db6c502e-ad36-4bb7-82c4-ccf3928f9c17",
    "Пластик светло-серый": "07e14444-c262-408f-9330-a83ada39f473",
    "Пластик серый": "f945cba9-8909-4faa-8455-149cf8cead8b",
    "Пластик темно-серый": "6d40c5ac-4af1-4fb7-ad3a-9cd1cdde8ca1",
    "Тротуар темный": "4462d8aa-b3fa-4925-9cdc-1130b6ca9d36",
    "Тротуар": "4af48bb4-7a7d-4d47-a7b5-1d372d4088e4",
    "Земля": "fb443661-c2dc-479b-aec4-b9cf4e0cf9b9",
    "Грунт": "cef53eb4-0ea4-40d3-9c57-ed42cdfe4d22",
    "Земля с трещинами": "05f6aeda-442c-4dee-b598-dce42d334c24",
    "Песок": "3c547a2d-2251-4b66-bf38-1c033fab14c8",
    "Грунт однородный": "ddf2a13b-6289-439e-99b8-0b9d8970ba00",
    "Газон": "45b14e06-925c-4157-9eab-02b275a602f4",
    "Асфальт": "71508700-4f09-4d9e-81ef-534e8fab3358",
    "Керамика глянец": "dfd559cf-b545-40e4-b2bb-44cb6d563325",
    "Камень литой (плохой)": "58d13c41-a741-470c-b7ab-86d4fa285a37",
    "Камень шероховатый серый": "948c3629-806b-4290-84c4-e2d3c14550c6",
    "Щебень": "e1e80f53-49b8-4c81-8368-f52af736594b",
    "Кирпичная кладка": "beaaf057-82fe-4e05-befa-9d049ec44966",
    "Кирпичная кладка с дефектами ": "622b9e9e-98da-4db1-9858-957758bc189e",
    "Кирпичная кладка песочная": "20190561-0409-4db2-ac5e-b1f0e7d6e029",
    "Бетон": "a7db29f5-3490-4639-a54d-d686b96f139e",
    "Бетон с дефектами": "138f8c0c-c552-49a3-b672-0d18e51c45fe",
    "Штукатурка шагрень темная": "05363f2d-01e8-419f-850c-e29a4fb94dbd",
    "Штукатурка фактурная светлая": "5d12c6b4-4d08-4ed9-8e44-387de37c423d",
    "Штукатурка светлая": "d5595a87-c62c-457d-922d-f2707f683ba1",
    "Штукатурка фактурная темная": "e61dfafa-d489-4fc7-b871-ed792afa6b31",
    "Штукатурка шагрень светлая": "ef191eed-7c77-42a3-ac77-00d45cad3569",
    "Обои звезды": "c27b2775-223c-48fd-9a9d-f2483db20b6e",
    "Обои светло-фиолетовые": "b19cbc9b-921c-47c9-adf2-e0f0e3697f1c",
    "Обои персиковые": "bb1f02b9-369a-4e87-a897-95119543466a",
    "Обои вкрапление темно-зеленые": "ec311c4e-bdc0-444b-90ac-2c85373acdfe",
    "Обои вкрапление зеленые": "ea7fdb28-b1a7-4fcd-a20d-f9817800679a",
    "Обои ромбы": "eb7b14cc-a5b5-4553-b3b7-4068cfcbf9bf",
    "Обои вкрапление светло-фиолетовые": "b556377c-0a51-4c94-afae-6c65bab5233c",
    "Обои однотонные белые": "3fc40431-a407-43ca-9cfe-de4f95d88249",
    "Обои полоска белые": "217695a8-275a-4b76-afc7-4af5649c844f",
    "Обои полоска черные": "d036b6fa-3abf-4fed-a2c5-17ad51c9d984",
    "Краска матовая белая": "bcf90f7e-d0e7-4b87-8af3-476a86b9ecf1",
    "Краска серебристая": "7374e831-3ff5-4edf-b025-f29fd8496bb2",
    "Краска светло-серебристая": "2cd4010b-8bae-4dd3-b9aa-d03f003fd18a",
    "Краска пепельный жемчуг": "a2b7c9c0-cc53-478f-8531-cd5c2793fd12",
    "Панели серые": "650a7d36-7de6-4fcd-8a1d-c1d718ec5631",
    "Панели графит": "6b73a096-837c-424a-a041-cbddbf6cba19",
    "Панели коричневые": "0817d435-a968-42cc-9273-a4688ab2984b",
    "Панели светлые": "4e12a037-8327-409c-ae7c-92f2546bde20",
    "Панели квадратные": "03e53772-c8d1-4719-874a-9e36225f3f8d",
    "Декоративная штукатурка темная": "9b95b48d-9f0d-42d6-a813-b9250f70b6e9",
    "Декоративная штукатурка": "2f9476af-425e-476c-8481-851e96b1778f",
    "Плитка квадрат светлая": "6fd119f4-1c6c-4b6b-8ead-350df2af85d6",
    "Плитка гексагон бежевая": "511a4acd-6226-4bc5-b7a1-a76de6c7613d",
    "Плитка гексагон розовая": "e7b869f3-e7eb-4944-9b2c-ec3864a9c3e7",
    "Плитка мелкая кофе": "d49d811f-ff36-4d1a-b817-e770b3700fb2",
    "Плитка соты": "5ad94111-47b0-44ca-b7f8-a38ee835cce8",
    "Плитка камень": "e35589f5-10a1-45cf-8d07-fc3694abc21a",
    "Плитка кофейная": "e62b2938-149e-4467-828b-aa4f68fef4cf",
    "Ламинат темный глянец": "37c59e6d-afbf-48bd-bf84-237a51879064",
    "Ламинат светлый": "cc01adeb-baa0-46d7-b2d4-e1f49cfc5bee",
    "Ламинат бежевый": "38b23e24-21b9-4bd3-ae94-bb9738c01f85",
    "Ламинат темный": "9aad80bf-ffaf-4afc-8fe9-b9543de63eb5",
    "Ковролин серый": "bf2fa1e4-5e47-49f7-b493-09a7cf7d3ce7",
    "Ковролин белый": "7989fa24-012a-4495-8d9f-4e965dc2017a",
    "Ковролин голубой": "96b4acf1-6d61-4d03-ada6-2fd08619345f",
    "Ковролин темный": "2b8182bc-9642-46eb-85e8-52d43aa43e1b",
    "Аризона": "3b306232-cb3b-455c-9081-294e922aa858",
    "Адена": "13b6881b-ffa8-4d03-8056-f7b192b12653",
    "Боуи": "62f45f4e-c724-4340-96ee-084019ee3c8b",
    "Ена": "e435cd61-9275-4da7-b224-9f88ed1e6928",
    "Федара": "894b374f-c2e4-42f6-8ef5-9917cf8ccdfe",
    "Финдус": "07a659b2-6711-4b80-a64f-744cfeece68c",
    "Юстус": "aaed2faf-66ca-40f9-887f-673e46c9cd52",
    "Тира": "a2089f89-cfe4-4cb7-b973-b03d853f9c3f",
    "Уни Неро": "22638e6a-96d6-4237-928e-0bfe1a4b303e",
    "Мрамор черный": "f15144be-970a-4761-91d7-528164fcd847",
    "Гранит рельефный": "ebdd4be9-c20a-44e7-bb4a-d73dcee45daf",
    "Гранит": "ac879cf5-a844-4e5b-8c9d-5b9e23d91f83",
    "Мрамор": "4b2037a6-3d3c-4173-93fe-bb44fa68c09a",
    "Мрамор белый": "9a182302-d3a4-43cc-9d4f-ae9abe8238ee",
    "Паркет елочный": "59bf3d8c-70c0-4af7-8d9b-b68119c20d85",
    "arrow_blue": "10834a16-c635-4a48-b060-de2dca9aace1",
    "Пластик матовый желтый": "719b0c93-c6ac-4982-afcb-013904a203c1",
    "Пластик матовый серый": "8695864a-5633-47c3-95b8-c858317f3c90",
    "Пластик матовый красный": "1a76b89a-b61f-4c62-a020-4d9a26225bf2",
    "Пластик матовый бежевый": "321226d9-83b9-4cc7-b323-4a5c1eef0442",
    "Пластик матовый синий": "7872bc64-f460-4629-bcf4-78c7f165c88c",
    "Пластик матовый зеленый": "e8f253b3-70e1-41c3-8a5e-9c77e1638b95",
    "Пластик матовый светло-серый": "eb8c4576-0abc-45b1-990b-95db76778cb5",
    "Пластик матовый белый": "e6828a66-462c-4126-ad80-49b4ba4c13e3",
    "Пластик матовый черный": "17a28927-6ab7-454a-a8eb-f612a0e8bda6",
    "Пластик глянцевый серый": "97b99af1-a4f7-43d2-a315-151517715d41",
    "Пластик глянцевый желтый": "49d53a27-2ff8-4aa3-8348-a04fea038df1",
    "Пластик глянцевый бежевый": "396e3d9d-55ed-46a0-9892-941157962b34",
    "Пластик глянцевый зеленый": "c5e1f17b-785e-4800-871b-60015f477d23",
    "Пластик глянцевый светло-серый": "9945f64e-07e2-48ab-b015-73dddafab9a9",
    "Пластик глянцевый белый": "0bb1df73-f529-46f8-9922-237988d97e4c",
    "Пластик глянцевый синий": "1f3248c2-cdf7-43c9-a0ea-3137e45a9813",
    "Пластик глянцевый красный": "4cee9128-66ec-4f12-a43f-96c48214913f",
    "Пластик глянцевый черный": "4faa38ec-0bb9-4c0e-a372-9bc9ae67dc46",
    "Краска глянцевая пепельно-голубая": "e071d311-7a72-4901-a33d-9aa740e15262",
    "Краска глянцевая черная": "eb0d1ee6-18fc-4e9e-93d1-1334cd22fe20",
    "Краска глянцевая фиолетовая": "e0822bfa-7d34-4702-a8b6-5fb2c64f5f4b",
    "Краска глянцевая темно-фиолетовая": "e24bf59d-ab29-49a3-8ced-42f5d3554b45",
    "Краска глянцевая белоснежная": "b2418a9f-34f0-48f4-97b9-4cb0c0a417bb",
    "Краска глянцевая слоновая кость": "f62e7e39-f534-4faa-a086-9daed5cce489",
    "Краска глянцевая бардовая": "a3936c91-c478-4a7e-ac50-d37e6773e06d",
    "Краска глянцевая темно-серая": "a3767f52-4b78-4207-b202-5dca9574e7e6",
    "Краска глянцевая белая": "b55429fe-7100-42df-aff7-c2015d0cddac",
    "Краска глянцевая светло-зеленая": "4215f5ed-9bea-43d0-979a-f0128105b529",
    "Краска глянцевая темно-синяя": "8f7ea6f3-7fff-4e0a-8acb-a3c3dfd359d3",
    "Краска глянцевая зеленая": "80058715-c689-479b-8f53-af28e37be29d",
    "Краска глянцевая небесно-голубая": "6d972fc9-7401-445c-b9b9-09c74c3fcd01",
    "Краска глянцевая персиковая": "7fd0d49c-ec62-4931-9e88-b9d1d2847bb1",
    "Краска глянцевая светло-серая": "46c68735-f44b-49c3-9b7f-d977238032cf",
    "Краска темно-серая": "0bf97b54-3739-4497-aa3f-b53e86c61096",
    "Краска глянцевая пепельно-белая": "266bfbb9-8355-4929-bf06-ee71ea5f6148",
    "Краска глянцевая бежевая": "30a11cb4-0db1-42ba-9c1f-badf422e76e1",
    "Краска глянцевая синяя": "3f779b57-c079-49b6-b9d3-4fd9a36f4fad",
    "Краска глянцевая розовая": "44d6ab65-cea0-42e7-aa00-8ed0a240c24f",
    "Краска глянцевая темно-коричневая": "5a6b705a-226c-4bee-ab96-f66caac90f7c",
    "Краска матовая светло-зеленая": "eb3c02e6-28ae-4490-815d-1806d61f9fde",
    "Краска матовая синяя": "6864e7eb-2e96-453f-917a-9cfa71e72a04",
    "Краска матовая бордовая": "75772135-1074-4871-8362-29f14deefc82",
    "Краска матовая розовая": "74dc1133-4dae-4d52-b8cc-0496f29b7b43",
    "Краска матовая светло-серая": "09a5f406-9333-4039-8900-2178cb0033fe",
    "Краска матовая бежевая": "d6f4b881-4028-4411-b5e4-618d3c7d4e3e",
    "Краска матовая коричневая": "7034ad69-21db-4b3c-ba74-199c0dd31c75",
    "Краска матовая темно-фиолетовая": "15831d6c-7d24-4c5c-99bc-dcb8b579fde9",
    "Краска матовая персиковая": "1b60c498-de56-4af5-8a5f-2d610ce6099c",
    "Краска матовая темно-серая": "76f2ef43-e37c-4185-85d2-8e7c15127162",
    "Краска матовая слоновая кость": "a3ea7d35-a989-4525-8c77-7c78cd5bed2a",
    "Краска матовая небесно-голубая": "a9b6aada-fee3-48ad-9184-775f1225b6af",
    "Краска матовая темно-синяя": "120b1f23-72a8-41c4-98c2-d6584b86f7ac",
    "Краска матовая белоснежная": "f2967033-0322-4930-b2fc-c1742beb57a8",
    "Краска матовая серая": "1ede8487-2a61-4b1c-a41f-4be418d9c65b",
    "Краска матовая изумрудная": "42e7cc2f-3ab6-4cf4-ba26-2051b95285ac",
    "Краска матовая черная": "ca5921dd-831b-4cd4-84a6-b942ae4dea5a",
    "Краска матовая фиолетовая": "f12ed5d5-faf1-4ffa-b76f-cbf3e2adb046",
    "Краска полуматовая серая": "b3ebce4e-55c3-49fb-b288-14cb15cdf452",
    "Краска полуматовая белоснежная": "795d6847-5e3e-4487-b022-31f1ea982a8c",
    "Краска полуматовая фиолетовая": "306eefa7-5f50-4f36-8c77-137709e4be33",
    "Краска полуматовая бежевая": "98a2b785-3498-425a-8219-0a25a2808fa5",
    "Краска полуматовая темно-фиолетовая": "c99071da-b830-4461-87ce-22c61684fd07",
    "Краска полуматовая изумрудная": "cea23b8e-2b6e-4b1e-802d-0e79dfea864a",
    "Краска полуматовая персиковая": "ecff2a19-430c-4d20-b7f8-ab4c2f0a9c11",
    "Краска полуматовая слоновая кость": "bc8f95a6-4135-44e9-bd26-cb4d8b8c5445",
    "Краска полуматоая бардовая": "55044e10-279d-46f9-8c95-02e2880c9c9e",
    "Краска полуматовая светло-зеленая": "f9a927c6-f087-461c-982a-9f5b727ce7b4",
    "Краска полуматовая пепельно-белая": "197e5c87-8deb-4f1d-b59a-e9872b1ec719",
    "Краска полуматовая небесно-голубая": "e46e161f-a950-4dd3-bef0-a69d19340ae7",
    "Краска полуматовая синяя": "32d6dfd4-212f-4d8c-9742-9dd008d7b316",
    "Краска полуматовая темно-серая": "def6ec43-e67f-45c6-b94d-c7026241fa03",
    "Краска полуматовая розовая": "9876a228-81c9-48a5-b96b-3400f780a77f",
    "Краска полуматовая белая": "009d512e-4a5b-4a2c-8c1a-0d5788b57ff5",
    "Краска полуматовая коричневая": "47db1be5-7027-4491-9ce8-59a95634b260",
    "Краска полуматовая светло-серая": "f210ce17-6cb7-4f96-b611-fa0c45ed9df1",
    "Краска полуматовая темно-синяя": "51751008-e9f1-4988-bd8d-ec9d1b52e142",
    "Краска полуматовая пепельно-голубая": "3420bfbc-4ba1-43c1-be19-475af16df99f",
    "Краска полуматовая черная": "85d62ed5-1a96-4335-ab41-4f3b34a3c51c",
    "Гикори натуральный H3730 ST10": "99575bb0-4238-418a-8fc2-2e47d1957fe8",
    "Дуб Аризона коричневый H1151 ST10": "c8af3ddb-cf29-41a1-92df-02a5a8f62706",
    "Лиственница горная коричневая термо H3408 ST38": "c3668276-80dd-4b5a-8e6a-b83bff5a57c4",
    "Лиственница горная 2k": "89e0de67-e5c3-4a14-8439-f3c965265662",
    "Древесина Шорвуд H3090 ST22": "803d5652-6a97-46fd-bb3b-ee4c21c7f927",
    "Дуб Антор натуральный H3330 ST10": "eb71cc4a-beeb-4eee-9a4f-a70def963916",
    "Дуб Бардолино серый H1146 ST10": "13cf0bb4-fbbd-449f-858e-083e77adcc9c",
    "H1181 ST37 Дуб Галифакс табак": "38625058-e5c6-40a7-bbdd-9a905a17e59b",
    "Древесина графит H1123 ST22": "2378e506-00f0-454f-850d-2c31ab034aca",
    "H3176 ST37 Дуб Галифакс олово": "1a7d7a19-e7a1-4109-bd16-7152881c9666",
    "Дуб Галифакс натуральный H1180 ST37": "0ecc45a5-e2ea-4dac-b4ec-5d4b3bfad723",
    "Дуб Галифакс глазурованный чёрный H3178 ST37": "0b1cfc51-5748-4b08-9f8a-8ddcd0a3f5ac",
    "Дуб Денвер графит H1387 ST10": "ed4e6147-5f16-4922-a0ee-97b735259005",
    "Дуб Давос трюфель H3133 ST9": "f3389817-a5ef-4aa2-9d56-e2cc4271113f",
    "Дуб Давос натуральный H3131 ST9": "dd2af50e-feb9-4a48-8e3b-532a6f7a732b",
    "Дуб Гладстоун табак H3325 ST28": "f7d68706-ba54-4388-9799-1f574f3351e1",
    "Дуб Небраска натуральный H3331 ST10": "2e3bab63-bebe-454a-926c-29f0567df2bf",
    "H3146 ST19 Дуб Лоренцо бежево-серый": "e4ebf9cc-2e17-40ab-8073-0913f3f364df",
    "Дуб Корбридж серый H3156 ST9": "290ad118-bd70-4c35-b1d1-2f1ce94dc748",
    "Дуб Корбридж натуральный H3395 ST9": "586b79ed-d873-4276-a9b2-58f6c85bdbdb",
    "Дуб Кендал натуральный H3170 ST9": "8061b274-2e28-4caf-9e57-48e78a14bf36",
    "Дуб Кендал коньяк H3398 ST9": "cf7d4b4c-30c5-4bae-b0cc-bfccc4a91ad7",
    "Дуб Канзас коричневый H1113 ST10": "8dfbe08e-5ee4-42e7-83fd-4716faca456d",
    "Дуб Денвер трюфель H1399 ST10": "9abaf6fc-c7ce-4d80-8c03-997fdd945383",
    "H2033 ST10 Дуб Хантон тёмный": "e723c8e1-ff40-4f7c-99c0-7b6e5ffa7b10",
    "H1313 ST10 Дуб Уайт-Ривер серо-коричневый": "aa489011-012f-46ff-a3e4-0dd4da000a40",
    "Дуб Уайт-Ривер песочно-бежевый H1312 ST10": "5e3fd3b1-a2b4-4ffc-989d-f0a4dbe7b547",
    "Дуб термо чёрно-коричневый H1199 ST12": "250c640f-2335-4786-b3b6-d7bc26f4de34",
    "Дуб Сорано чёрно-коричневый H1137 ST12": "795250ca-8f09-4afe-93fa-e5c1bb6cff8c",
    "Дуб Санта-Фе серый H1331 ST10": "eb4d2b46-b587-4cca-806d-1c9de037a8d5",
    "H1330 ST10 Дуб Санта-Фе винтаж": "70e4fd84-d069-4f91-8307-519b53abb4c2",
    "H3190 ST19 Металлик Файнлайн антрацит": "79fcb2de-99fb-423c-b6c8-6c772d156d81",
    "H3192 ST19 Металлик Файнлайн коричневый": "e0efb48e-d0de-4dec-8726-faa94cee4003",
    "Орех Дижон натуральный H3734 ST9": "3663c346-1090-446c-92a6-2259f14d23fd",
    "Орех Карини натуральный H3710 ST9": "cb351eef-fbbc-4282-ada4-7b2d4194d1d9",
    "H1345 ST32  Дуб Шерман серый": "cd8a3e79-50a5-4173-84cf-68a1c03c6221",
    "Орех Пацифик натуральный H3700 ST10": "8f876953-f1e0-462c-bc06-507b01e3ae2f",
    "Орех Пацифик табак H3702 ST10": "cdba3d6c-8e61-470b-9c96-22034f82d146",
    "Пихта Брамберг H1487 ST22": "620cdd0e-a1ce-45c2-b052-f9337dd60896",
    "H1251 ST19 Робиния Брэнсон натуральная коричневая": "7e0bcc8d-4bca-4cdf-93ee-db53e1c174b9",
    "H1253 ST19 Робиния Брэнсон трюфель коричневый": "a5015d1a-07c5-44e9-a176-15ec12e4c70d",
    "Сосна Аланд белая H3430 ST22": "b63d4784-b146-4028-a4bd-383235dfffc6",
    "Сосна Аланд полярная H3433 ST22": "a6103394-799f-479d-a4b7-4dfb3d87320e",
    "Сосна Касцина H1401 ST22": "7e0198e2-ef3a-47e7-a723-8eb1711ae033",
    "Сосна Пасадена H1486 ST22": "29b91535-beec-4e10-ba37-c16704946120",
    "Файнлайн крем H1424 ST22": "dc98664a-b6f6-474d-93a7-073dcf020446",
    "Флитвуд белый H3450 ST22": "dd714ad9-2575-40b5-b740-6c32fc736b89",
    "Флитвуд серая лава H3453 ST22": "6cb7f970-937f-40b6-8f2e-4017bc0f7a59",
    "Флитвуд шампань H3451 ST22": "30c5264f-891c-4706-8de7-4765ad675d35",
    "H1250 ST22 Ясень Наварра": "89ce5d41-cfba-456f-bf89-a111be13012d",
    "Акация Лэйклэнд светлая H1277 ST9": "6fb7162d-4600-4c14-b0ec-5dac6d8b4d60",
    "Баменда серо-бежевый H1115 ST9": "fe0646e5-60bb-4a0b-9041-0c8bce636d06",
    "Берёза Майнау H1733 ST9": "c0274cc9-071a-44a8-8bf9-4314c412d108",
    "Бук Бавария H1511 ST15": "cff59e39-2857-4b53-bcf5-6e25f2f1a64c",
    "Бук Эльмау H1582 ST15": "76afdcf2-4cc2-411d-bbe2-bad1484f4cce",
    "Вишня Верона H1615 ST9": "f903241f-c77a-4cef-ac67-3e3efdb65399",
    "Вишня Локарно H1636 ST9": "830b119b-9ec7-4e3c-a18f-583ea9e85e24",
    "Дуб Гладстоун песочный H3309 ST28": "c2537470-c508-4187-a8c5-615b232c3780",
    "H1318 ST10 Дикий дуб натуральный": "a3f96d64-2bcb-4de8-a0a0-8aabe5e9e9ee",
    "Древесина белая H1122 ST22": "1ddcd5dc-4a2e-4858-96f7-bd2253f6a6be",
    "H1145 ST10 Дуб Бардолино натуральный": "e22d8291-6751-4e73-9214-b2c8162ef20c",
    "H3157 ST12  Дуб Винченца": "5683be8b-ffd3-4fe6-b608-a61cd5e370ff",
    "H1176 ST37 Дуб Галифакс белый": "c7e923fc-e5e0-443f-b60b-583128057484",
    "H3303 ST10 Дуб Гамильтон натуральный": "2fa11915-767b-4005-881f-0a6f4160c2f3",
    "Дуб Гладстоун серо-бежевый H3326 ST28": "01ca9258-556d-4a9d-b42f-c4bc65c517bb",
    "Дуб Чарльстон тёмно-коричневый H3154 ST22": "fa83290a-1364-4383-b6bb-060eb37279d0",
    "H1346 ST32 Дуб Шерман антрацит": "665e2b81-feb5-44dc-80d0-9c0fe9e397f9",
    "H1344 ST32 Дуб Шерман Коньяк коричневый": "9c4b4101-5077-4a98-a73b-4df3f791a698",
    "H1710 ST10  Каштан Кентукки песочный": "18348d93-9fe1-4f5f-a93c-a0086cab25fa",
    "Клён Мандал натуральный H3840 ST9": "7b9a72e3-5efb-43f0-8a6e-4e1c1b3d7092",
    "Клён сахарный шампань H3860 ST9": "a3b398c5-9b1f-4b71-a88f-fdac0a6522f6",
    "Кокоболо натуральный H3012 ST22": "1a11e565-cadd-4e64-8705-6a5bf2bd7ddd",
    "H1714 ST19 Орех Линкольн": "f4730126-a903-4fa1-8ff5-267fa4681004",
    "F416 ST10 Текстиль бежевый": "64aefe29-7efc-40ac-a98a-d4da5502122a",
    "F501 ST2 Алюминий матированный": "f13b77a7-3900-467c-8c05-cea626e2e291",
    "F186 SТ9 Бетон Чикаго светло-серый": "582ec2e2-a35b-4dd0-8feb-f6806f18f5c6",
    "F187 ST9 Бетон Чикаго темно-серый": "72b161e8-9a2c-4cb8-882a-3c8e2630f4b5",
    "F509 ST2 Алюминий": "bc8a5658-f956-488d-a8a3-4740eea5b639",
    "F206 ST9 Камень Пьетра Гриджиа чёрный": "6e93713f-306f-4068-9ef7-e6588ee3f146",
    "F433 ST10 Лён антрацит": "e73e16af-2dfe-400f-91a1-4572b1de9810",
    "F204 SТ75 Мрамор Каррара": "d56a4f75-e5e8-440d-b0c2-cf2524a292bb",
    "F812 ST9 Мрамор Леванто белый": "a2ad1d52-b204-4c8a-b545-ae622a79bd7e",
    "F637 ST16 Хромикс белый": "5586752d-c6cc-4ae9-9c6e-97eb0b76aaac",
    "F642 ST16 Хромикс бронза": "bd2c9f96-2fd6-4e0a-92e3-0ceb51e07e6b",
    "Белый базовый W908 ST2": "fc1f7451-8862-4dfa-86ad-f21c5893ef8c",
    "Белый Премиум W1000 ST19": "b4eaafc6-6241-4411-a8bd-9e9acd622c01",
    "Белый Премиум W1000 ST38": "52ef0834-8a57-4505-a8fc-0b3c14208782",
    "Белый Премиум W1000 ST9": "83523f05-e8de-4273-a08c-ed39bd607fcb",
    "Лес черный U998 ST38": "0e2edc99-ba6f-4232-8c90-69ba08cd056d",
    "Серая галька U201 ST19": "4f834f8b-db3b-4d69-a488-6a5deb73717b",
    "Черный графит U961 ST19": "65abbb59-873e-42c0-b6c2-7fc74f5806ac",
    "Черный графит U961 ST2": "0ccaa8b3-1efa-4c7c-889c-58897a9ff32f",
    "Черный U999 ST19": "c7064a2a-0983-4319-a338-1bbfc74cac6d",
    "Черный U999 ST2": "58687a0d-86cd-409c-8817-08c96b828116",
    "Алебастр белый U104 ST9": "f1009617-2c7a-422a-9910-fa2c295c1ca1",
    "Альпийское озеро U504 ST9": "7ead7a2f-f638-44ae-a4ca-949824ec6075",
    "Арктика серый U788 ST9": "979cb766-a629-468c-9f15-889d69c30f58",
    "Бежевый U200 ST9": "a851b279-2bb8-472f-9315-76604ffdeb7f",
    "Бежевый песок U156 ST9": "6d07e12d-92c2-4f52-8b70-022834b7bdb0",
    "U775 ST9 Бело-серый": "7f9a0d84-aec2-4971-a5ee-afdc3998a906",
    "W908 SM Белый базовый": "dce9068e-52b2-4809-ba8a-44ab3444222a",
    "W1100 ST9 Белый Альпийский": "275d1071-002c-491b-a0e9-365b36f94254",
    "W980 SM Белый платиновый": "f97e3682-2550-409d-847a-cde7c251a52d",
    "W1000 ST PM Белый премиум": "6716e306-87d5-49e2-b706-46937ad72a50",
    "Бургундский красный U311 ST9": "ea32cfe1-920c-47ab-b9a1-7b1b6bd9ddab",
    "Ванильный жёлтый U108 ST9": "763f4bd1-0cf8-4e89-a1e5-ae4c3bbab3bd",
    "Голубой горизонт U522 ST9": "fe258167-b488-4b2b-8973-9d846b1d7d62",
    "Делфт голубой U525 ST9": "d1c8f2ac-0138-4cd3-96fc-1eff90f0e271",
    "Диамант серый U963 ST9": "8d02de84-df3d-408e-8473-30b157877079",
    "U626 ST PM Зелёный киви": "442d43ca-facb-4f58-8a33-0e430660f970",
    "Жёлтый бриллиант U114 ST9": "8e53ea0d-5546-4b37-a780-bc786d9a6e0e",
    "Зелёный лайм U630 ST9": "dbca0b5a-67e2-4dca-a196-ddfc05d68333",
    "Зелёный май U600 ST9": "f4f104d1-4378-47b9-ab1e-b09841637ab9",
    "Камель бежевый U216 ST9": "f1bf04ef-482e-400f-96c5-135765e70f71",
    "Карамель нюд U830 ST9": "fc67e0a1-ccc0-4a8d-a98d-b380bdaf7bbb",
    "U702 ST PM Кашемир серый": "c99b4aba-6d02-4de2-8c0f-61cf2ba96516",
    "Коттон бежевый U113 ST9": "e07fcf28-6228-4249-a1f2-2b608f8cd6d4",
    "Красный китайский U321 ST9": "c2969a73-6af3-4019-b66e-97c1549bc38a",
    "Крем бежевый U222 ST9": "e7ba3d97-eb1d-4afe-abd1-06eb0af87be6",
    "Кубанит серый U767 ST9": "cb5f6f42-8999-4cf2-93d0-3ca2c89b2429",
    "Лава серая U741 ST9": "920ef040-3a91-437b-a999-ff8b2606db66",
    "Нежный чёрный U899 ST9": "085b336c-ef64-4781-8810-69f2229a1eca",
    "Оникс серый U960 ST9": "fce7ac84-c69c-41f2-8c8b-43055689d1c2",
    "Оранжевый U332 ST9": "9d79577e-be59-42ba-a91f-e857bf232800",
    "Розовый антик U325 ST9": "c0750197-0523-4a46-824e-5d8214faf907",
    "U708 ST  PM Светло-серый": "b95d90be-de61-4b64-9d60-ec310c74d1f4",
    "U201 ST9 Серая галька": "5d97d3bd-013e-4169-9708-499f3d506b8d",
    "Серый камень U727 ST9": "aea8b82e-5fcc-4659-9d8c-02c6fdc4a65e",
    "Серый перламутровый U763 ST9": "2412a863-2761-45fc-a3f4-d60547a58069",
    "U732 PM Серый пыльный": "0dd66b0e-59cb-4294-8eb9-e6aed7ea3083",
    "U968 ST9 Серый уголь": "532076b5-1ee9-484d-b412-d32d0e62172f",
    "Тёмно-коричневый U818 ST9": "f89594fe-1a8b-4fa1-8c97-4337486779fb",
    "Трюфель коричневый U748 ST9": "ccd84b33-fbfe-4e1d-b979-e8a7a8abb378",
    "Фламинго розовый U363 ST9": "d1ac25d1-37a6-4d85-9222-58600ec796e2",
    "Фуксия розовая U337 ST9": "cd7a0741-38ca-4b00-846e-c33661598099",
    "Цитрусовый жёлтый U131 ST9": "b5a8b98b-12ae-4a52-bfa8-1a9ba2a18ca6",
    "U707 ST9 Шёлк серый": "ec642dbf-971c-4172-99d6-2f10b558a52c",
    "Ярко-красный U323 ST9": "0f309f43-f368-4dc6-a0b1-4a9ed5155ace",
    "U750 ST PM Ярко-серый": "7a886300-9224-4ead-a8fd-4b18d4193419",
    "Бук Бавария Светлый древесные поры": "f76ae51f-074e-4dbd-ae67-85c93f4ac0a7",
    "Венге": "4a8ce9e9-bcb1-4515-85c9-7405ded47270",
    "Белый шагрень": "609b6c66-0b23-4215-9d2a-2997320b6d14",
    "Дуб Ясный": "15218a99-db40-465d-ba18-892f6017f391",
    "Крем": "28ebe84f-3e74-4e8f-b1f7-bbd8f1022af2",
    "Орех Экко": "f037c8fa-7fe4-48d5-88c7-8f56ccc7e518",
    "Дуб Млечный древесные поры": "607f6434-5893-4ae3-82c4-c740237f0a8b",
    "Алюминий шагрень": "71e083c3-613d-4333-bab7-ef07aa8be320",
    "Платина шагрень": "3b2c4627-7a37-4677-a692-5dce494a872a",
    "Черный Шагрень": "7f60d3f6-ba84-40db-adda-9adfbe662a5f",
    "Итальянский орех": "73534d7b-0d8a-4ba2-9fff-14919c3a256f",
    "Орех Гварнери": "469c5227-61a3-41d2-bda3-403099ceae99",
    "Дуб Сонома 003  мягкое дерево": "58d14f49-0531-4395-8c67-307791c0b96a",
    "Сосна Гасконь Темная": "9030341e-637a-4909-b070-c92271bc337d",
    "Дуб Самдал мягкое дерево": "b26e4521-3bf4-4815-93fe-95804043ca44",
    "Дуб Делано 005 мягкое дерево": "e7a05312-21fa-4fb1-9c81-bfffd44b1fff",
    "Винтерберг мягкое дерево": "179aa60e-672e-4edf-8b08-7b90b777e420",
    "Венге Аруба древесные поры": "80f0808b-1029-4158-a1fa-cfe4e89cf1d9",
    "Бодега Белый мягкое дерево": "a55495dd-12df-41bc-b3a8-14499f24d019",
    "Бетон Пайн мягкое дерево": "f7bde0ba-5ae7-4641-98b1-7908b75c836e",
    "Цемент Светлый  шагрень": "4da3c3fd-5fc2-4e40-bae5-f795cb74cbc9",
    "Цемент Темный  шагрень": "913cbd07-57eb-4431-9b41-ea9d9cee82c9",
    "Ясень Анкор Белый мягкое дерево": "cda3f188-77d3-4111-ab8e-8fe40395e01e",
    "Ясень Анкор Светлый мягкое дерево": "eda79f53-0b0f-4e6a-87a9-4aa2bd3d1cc1",
    "Ясень Анкор Темный  мягкое дерево": "71df4983-bfe0-40c9-a2dd-3e5fb5693018",
    "Ясень Ориноко мягкое дерево": "a015d3ee-408d-48aa-877e-cbb3cce9e54b",
    "Ясень Шимо Светлый древесные поры": "2110e227-f748-48cc-96ee-431286583669",
    "Ясень Шимо Темный  древесные поры": "b7bcdc7f-a21b-489d-9f5a-e591f1f6b73c",
    "Венге Линум древесные поры": "3f4abbf6-f466-456c-9c1b-ce910f661e6f",
    "Вишня Оксфорд древесные поры": "8eae1b0a-abc4-4b93-9ac3-7190a7378c6c",
    "Дуб Атланта древесные поры": "ab526a31-aaac-46ff-bdf7-696ed6d009ac",
    "Дуб Делано Натуральный мягкое дерево": "7fbe4e9d-32d6-43ef-a635-0173d1aa6ff1",
    "Дуб Поненте (Выбеленный)": "81d025d8-87fa-4cac-b5d5-da2005825fe6",
    "Дуб Шамони Светлый древесные поры": "fca5a88f-5e93-43e6-967d-41ddca44f7af",
    "Ноче Экко древесные поры": "29f815a7-7a12-4829-bcf5-9af2db7ae813",
    "Ноче Мария-Луиза древесные поры": "35d3c161-214a-4f51-aee2-2f5e2cc79e86",
    "Ноче Гварнери древесные поры": "586c9f56-a179-415e-b9f5-073c877f2b28",
    "Либерика Молочная мягкое дерево": "56d5a734-f468-43a5-86b8-0e9d210c3bd4",
    "Дуб Шамони Темный": "4dd3915a-9566-4f33-bf9f-36d77b8354c4",
    "Ольха Натуральная древесные поры": "0b6f3e3a-8d7b-4c42-8ce6-264359b9e613",
    "Орех Гепланкт древесные поры": "62b15806-cb00-4e55-a22d-1fb37c8dd102",
    "Сосна Гасконь Светлая мягкое дерево": "17161020-4298-40f6-99f5-3c32784b2563",
    "Дуб Сонома 001 древесные поры": "5b46ff07-a10a-4ef8-bab6-abd44284e7c3",
    "Желтый шагрень": "9b381a4e-ef09-429c-b10e-341549e252d7",
    "Кашемир шагрень": "f3a20c9f-7279-494a-99ef-4ef40732cefc",
    "Капучино шагрень": "b078b955-33a2-400a-a8f0-fe85cecc511c",
    "Оранж шагрень": "bc4360d6-ca61-49f4-9e0b-18718d6066eb",
    "Салатовый шагрень": "55b6a328-414c-4bc8-904d-fb945c589178",
    "Светло-серый шагрень": "adff0e57-5791-4813-8424-9d98b7461d06",
    "Светло-синий шагрень": "b9fd4486-1aea-4d45-9e06-e01a117b4cc4",
    "Серый Камень шагрень": "30c0893d-4a94-4569-a108-331021f5f5ce",
    "Серый Темный шагрень": "e71fa43c-c98b-4514-8bbb-053dc4ae9208",
    "Супер Белый шагрень": "9ad700e7-574e-42af-bc46-c50304940d5d",
    "Титан шагрень": "99686f36-10c5-4958-97f0-d95318cc4215",
    "Бежевый (Шампань)": "c74bd70f-e96b-4a1e-99e6-b7f1da6e32bb",
    "Белое дерево": "715fe0a0-ad56-4aaf-9a38-39b1dfdb9a20",
    "Бетон светлый": "8a2630c1-95ce-4906-9509-319bcb5c8034",
    "Магнолия": "e0de1949-5b74-4efe-92cd-6a62251c072e",
    "Платина": "3bb71bf5-c756-4a85-b456-8a2798cbe365",
    "Сосна белая ЛОФТ": "9a51c756-3e5a-4f91-96ba-5e8e3a3644bd",
    "Сосна серая ЛОФТ": "495f5f8d-dd1b-4671-b4e1-ea03326c1950",
    "Орех итальянский": "11fb2cf7-1435-4ce6-89f8-bdd4c74e06ad",
    "Дуб шоколадный": "9f96316e-b94f-4461-857b-4be3b826cca6",
    "Дуб Сонома": "2395f125-27c1-464d-8a3f-cac7bbbb570b",
    "Дуб золотой": "096aef69-ab7f-4382-ae3a-25974cf0b786",
    "Дуб грей": "aa3d5a65-5f4f-497e-ac96-5ea593ca7f65",
    "Дуб беленый": "3fc9eefa-177f-4e33-96c5-ff38fe433052",
    "Графит": "24542ee9-0ba0-414f-b6a0-3d830cc1cbb1",
    "Ясень Белый": "3527c2ba-11ce-4ee0-b8dc-9cdd8d9e76fb",
    "Капучино": "eda93e27-a967-401e-8a58-fdeaa2165ee3",
    "Махагон": "c672c0ae-0cee-4d21-8d41-444b2b9d1078",
    "Орех Миланский": "1a8766e5-49d8-4dcf-a88f-f84456d41c1c",
    "Орех": "350ed234-b5e4-42f9-ad9c-e1bc4a76e363",
    "Бетон темный": "2e319117-be90-4807-aa6e-f7e83db734da",
    "Эковенге": "0fb7e0cb-fb24-4687-ade3-eee14505149b",
    "Эмаль": "22da5848-f8c4-4ea2-8b51-d7302edff6f3",
    "К1 - «5029-43»": "94fa05ac-8fad-4770-bfcd-06b4e265f3bd",
    "К1 - «Голубое небо»": "98567695-6dbf-4fd7-aac9-72c533cb429a",
    "К1 - «Дуб Крымский»": "12032185-f7b6-4746-9a79-23f48bcf7795",
    "К1 - «Желтая Шагрень»": "63a3c3a2-f5ff-4c34-9d8d-2b235c0214cb",
    "К1 - «Анегри»": "963e8357-05ee-43d0-bb19-5bb230851c81",
    "К1 - «Белая Шагрень»": "e6e59968-cc27-4aca-aeef-b524b41d7bf6",
    "К1 - «Беленый Дуб»": "d5187495-12d0-4db4-a0f6-201a3eac479a",
    "К1 - «Бук»": "a68f731d-bef2-4583-8a98-7b72540f3ac3",
    "К1 - «Ваниль»": "4988a45d-85cc-48f1-a0ff-daa4b48a1742",
    "К1 - «Венге»": "bae9bad0-2db1-421c-be1f-0551570653e5",
    "К1 - «Венге Светлый»": "5b7d6fb8-fde5-48ab-9547-401538accb15",
    "К1 - «Выбеленый Дуб»": "96c3c237-6b42-4a1f-8d2f-62deeafdfe04",
    "К1 - «Дуб Антик»": "e4f761c1-317f-4254-91a2-b8dcfd86fb3d",
    "К1 - «Дуб Коричневый»": "7f939e13-2bb2-43b2-b08e-868106dc1ca1",
    "К1 - «Белое Дерево»": "df530fb4-5fa2-4c27-bbcc-9ce4cf3cdca0",
    "К1 - «Дуб Крафт Белый»": "3a440582-73e4-474a-9780-66cc6dabb0f0",
    "К1 - «Кантри Венге»": "01d6b322-36be-429c-9382-98b9c3983380",
    "К1 - «Клен Азия»": "3b7f0400-b20f-4170-b926-fe3c74341aa5",
    "К1 - «Кожа»": "75eca101-6553-4bc6-a170-b793549c416f",
    "К1 - «Кокос Белый»": "2b8a1e0d-165d-407b-aa47-44f9478a9b86",
    "К1 - «Лиственница Светлая»": "deb961ae-c558-48a8-9eeb-c79f33933994",
    "К1 - «Лиственница Темная»": "2f86b246-6e7c-4dcc-8ace-43264cbed0a2",
    "К1 - «Зелень»": "6406a744-879a-4242-aa69-ca7fac086c14",
    "К1 - «Дуб Крафт Серый»": "ffc71428-51e4-43c3-9203-ca798b5443d7",
    "К1 - «Дуб Крафт Табачный»": "e77fd964-1eb1-4b65-8824-af093332a196",
    "К1 - «Дуб Сокальский»": "03bfb2e6-17b6-41b5-9d21-03ab903170de",
    "К1 - «Дуб Тортуга»": "dce1a9b3-61d8-4414-99cc-538995927c3c",
    "К1 - «Дуб Шамони»": "a64026c1-f9c2-4694-9874-3dd2c0290fd8",
    "К1 - «Ель»": "c05b871b-b334-4ebd-8081-208972db9825",
    "К1 - «Желтый»": "c6d258d4-1d93-492d-ad3b-5eb59def06d4",
    "К1 - «Ольха»": "5559acfa-578d-4755-83ff-52c7e675883d",
    "К1 - «Ольха 47»": "a2bc8b70-8a57-4a6f-8ee4-e042e4a9810f",
    "К1 - «Ольха Красная»": "61fd06ee-2d72-4e85-9911-d743ba7f55fc",
    "К1 - «Орех»": "ec2a5520-12d2-4795-87fa-871fae2b053e",
    "К1 - «Орех-42»": "316291fa-3016-48cd-b001-ef4564cc7917",
    "К1 - «Орех Миланский»": "fc52f795-47ee-4167-8db8-74322f021815",
    "К1 - «Ореховый Дубослив»": "3dabd416-c3c0-4d90-a5cd-484d136e17b9",
    "К1 - «Палисандр»": "7d4e66c5-92a6-4062-a5b2-72b8bdba838d",
    "К1 - «Реалвуд Грей»": "72827c0d-b9f1-4a13-97d2-62669f47947f",
    "К1 - «Реалвуд Фисташка»": "13e89ecb-9984-43c7-aaad-9d2e1f6968ec",
    "К1 - «Реалвуд Шалфей»": "93af3944-6731-4fbe-a474-a9be4d56b10e",
    "К1 - «Роза ALF»": "c614dbf5-fdde-47bb-941e-ab51d9ffee32",
    "К1 - «Сандал Белый»": "bbd10946-d55d-4f75-80c2-b45fbba778ec",
    "К1 - «Сандал Серый»": "64558912-8891-47ef-be91-f0dbff9b5768",
    "К1 - «Санторини Белый»": "3748ea66-bb0c-4566-821c-b597f63d9f11",
    "К1 - «Санторини Черный»": "4671b8e2-a426-4bf5-8376-051f6dd0cc00",
    "К1 - «Сапели»": "ad05bb2b-5a73-474d-833d-24317567c3bb",
    "К1 - «Синий»": "6b16c9c8-eb80-4388-ae2d-e9bd9fe68ddd",
    "К1 - «Скандинавский Дуб Белый»": "8fd54f90-1e87-4e49-828d-e27030b1af1c",
    "К1 - «Скандинавский Дуб Серый»": "e2d6a6a2-32db-4569-b018-e602d839cb76",
    "К1 - «Сосна Белая»": "e539566f-78a1-4716-992e-993829a64afe",
    "К1 - «Сталь»": "0af66525-ac9f-419a-a639-66209d3c5201",
    "К1 - «Старое Дерево»": "d100a3e7-d094-4858-a3f8-af5ab80c3b8e",
    "К1 - «Тиковое Дерево»": "6f5b8191-12e5-4859-acc6-314cc46010cf",
    "К1 - «Черная Шагрень»": "5586a393-194c-40eb-9565-b8f85941eb1b",
    "К2 - «225 Белые Цветы»": "fef37cf2-24f4-45af-aab1-54d2b472ef7d",
    "К2 - «Бетон Хафит»": "7c9d1fbc-a20c-4876-a061-2ffc7b5b2334",
    "К2 - «Дуб Болотный»": "faaf62d5-9fba-44e6-b961-fcff67ee7fb6",
    "К2 - «Дюна Мистраль»": "0db5eeee-7717-4522-a29c-815253dddd12",
    "К2 - «Дюна Муссон»": "c2e3c3c1-48b7-406d-b9e5-d0946f03078b",
    "К2 - «Дюна Солано»": "e2b996c9-3f52-49ac-8fab-504b5de9ef6c",
    "К2 - «Красное дерево»": "2551fb43-5f4b-413e-ac89-c9c9c0580983",
    "К2 - «Мрамор белый»": "5f706c1e-f16c-409f-a3e5-e30c62926221",
    "К2 - «Сканди Жасмин»": "de14d4f9-7345-45b6-bbe3-627a9d6cbd28",
    "К2 - «Сканди Имбирь»": "1da468d9-0d81-46ba-90a5-8e02849f5956",
    "К2 - «Сканди Мускат»": "db244c54-8948-40cf-b34b-996705896265",
    "К2 - «Снег Шагрень»": "ed74cbd3-02f8-44fa-8a51-1f5595e58a79",
    "К2 - «Шато крем»": "c3cfe9a1-193d-4906-a330-10f1ae7e0694",
    "К2 - «Бетон Серсея»": "26a1887f-6dd1-43ce-bcc3-40ee64a94715",
    "К2 - «Дуб Английский»": "4fa91f99-65b2-47d8-ae7f-a79b4aec8183",
    "К2 - «Дуб Деним»": "e06dfff5-5ce3-4726-813a-2a7831da5c8b",
    "К2 - «Дуб Полярный»": "f1ca8203-d726-4091-a64d-045815f68506",
    "К2 - «Дуб Седой»": "14189756-8c3a-40e9-a575-8ad8d4782fdc",
    "К2 - «Техно Платина»": "f1005b0b-c1cb-4600-98d3-1351d12124f1",
    "К2 - «Техно Шампань»": "42a40082-1e8d-4d82-8365-b33c8901490b",
    "К2 - «Шелк Золото»": "ae36d99b-3679-4152-aa80-4a2eeccefea2",
    "К2 - «Бетон Арья»": "e479b877-fc6a-4548-826a-aab3e3765c09",
    "К2 - «Бетон Беж»": "fb9da664-e53b-4e0f-bf8b-06c7be03bd9d",
    "К2 - «Бетон Графит»": "da18108e-d5e7-4916-b60a-449522987c36",
    "К2 - «Бетон Дарион»": "0ac4237d-0f50-44c8-8f4a-c5fb04b0fccd",
    "К2 - «Бетон Дрого»": "6dba90b2-6543-4ea6-87de-649d077ca48c",
    "К2 - «Бетон Натуральный»": "9e7dc14d-dc89-4d0f-8afe-cf29da851ef7",
    "К2 - «Бетон Оленна»": "a43658aa-b893-4e58-910f-31a4a514743e",
    "К2 - «Бетон Старк»": "3285189d-175c-4d83-8221-cd0ffefccb6a",
    "К2 - «Бетон Тирион»": "169cac5c-de6a-4c70-b74c-8b6e27b1b508",
    "К2 - «Дуб Агат»": "d1828e56-a2ed-4822-8d85-28370236e6e4",
    "К2 - «Дуб Бомонт Натуральный»": "9f41dc49-3f4f-4252-b56a-dfca766c95dd",
    "К2 - «Дуб Винтаж Графит»": "f40d2357-0d46-4c24-a68d-3ac7de1aa2f2",
    "К2 - «Дуб Винтаж Грей»": "7ec35155-5e2f-48fa-9261-67e13e897122",
    "К2 - «Дуб Винтаж Медовый»": "16a8a60b-d2a3-4d85-9fdd-032615fc6180",
    "К2 - «Дуб Кварц»": "cbdbd659-cef5-400f-96ba-58d6422fa53f",
    "К2 - «Дуб Малахит»": "921079b2-0fee-4fa5-b217-696bea0a2bdf",
    "К2 - «Дуб Мелфорд»": "646d05e8-c091-428f-a9fe-44933c2c28c2",
    "К2 - «Дуб Мелфорд Светлый»": "73b0659f-067f-4c3f-93c1-043bf40ef99b",
    "К2 - «Дуб Мокко»": "bc5f777c-75e6-4bdf-b99a-240669120e74",
    "К2 - «Дуб Снежный»": "4a2e0ac4-0710-4191-a7df-d9f36adc2bd4",
    "К2 - «Дуб Топаз»": "5a1a3876-de73-486b-bfb1-3cd3320de5ec",
    "К2 - «Дуб Филадельфия»": "e7208854-1b14-4169-91ad-4456323d087d",
    "К2 - «Дуб Чернильный»": "a4915096-a0c5-4695-822d-ea2969b564c3",
    "К2 - «Дуб Честерфилд»": "c283593c-f611-49fa-92da-e70d6dac176f",
    "К2 - «Залотой Ясень»": "67d91b6c-1246-46d5-a557-010525a70226",
    "К2 - «Изумрудное Дерево»": "b5a75358-5490-460b-82e4-3e3a48958876",
    "К2 - «Крем Ясень»": "e1b51567-8732-4494-8264-c77f38d1cb03",
    "К2 - «Крымское Дерево»": "5d400aad-2f68-41fa-ac0c-64bfefc99b57",
    "К2 - «Лаванда Жемчужная»": "44060469-19b6-4b58-80fe-803248959a92",
    "К2 - «Лазурное Дерево»": "9d710763-cb97-4ec7-9d7e-8633618d7360",
    "К2 - «Липа Белая»": "1dd0b2fb-0396-40cb-a826-1b7c90b88dbf",
    "К2 - «Мармарино Белый»": "ba5c484e-c8c7-4bc0-bd30-ee1bbafa7085",
    "К2 - «Мармарино Грей»": "30739632-c6eb-45bc-8e85-df0dd012cc85",
    "К2 - «Мармарино Капучино»": "e080cd86-cc41-42e6-9a23-d186b3146cf8",
    "К2 - «Мармарино Перламутр»": "158f4339-735a-417a-8870-d449d211ca46",
    "К2 - «Мармарино Черный»": "6b05480a-5f52-412b-89fd-48af8e36f5c6",
    "К2 - «Мрамор Светлый»": "b7534503-bf40-4f5c-a833-ca223dffdb1c",
    "К2 - «Мрамор Темно-Серый»": "b7f344d4-017b-4089-ad31-d8285b993fef",
    "К2 - «Мрамор Черный»": "2b2ec5b5-54a2-4e4e-b07d-3049b4b53c2d",
    "К2 - «Орех Мокко»": "3df46779-edfc-4c6a-8e3a-61be7d8fca2f",
    "К2 - «Орех Натуральный»": "e4a2c247-0132-46b0-a710-76e1799dd0ec",
    "К2 - «Патина Белый Снег»": "6c178d50-0a7b-4627-a2fd-ecfda23b669b",
    "К2 - «Патина Голубая»": "ae4ca869-dc42-4bb8-aa12-d4aae9b628ac",
    "К2 - «Патина миртовая»": "f64ff390-5345-4cc9-aabd-d9f58a9ed95a",
    "К2 - «Распил Орех Светлый»": "51c5be5d-d95b-4c8e-9ac6-9989322f96ad",
    "К2 - «Распил Орех Темный»": "689f6ef1-c941-4036-9468-25352f49685d",
    "К2 - «Рогожка Светлая»": "8ebc1bbb-ed4c-494a-adbc-a58baba43e0d",
    "К2 - «Рогожка Темная»": "f05b2bdc-f9dc-4f7d-8a5c-c99da7270bf9",
    "К2 - «Слива»": "e47ebbcd-899e-4fbf-86e2-17968d3d82fd",
    "К2 - «Сосна Скания Светлая»": "f825511a-5416-46c4-be1b-359a0fe666b0",
    "К2 - «Сосна Скания Темная»": "7e89d627-2a04-4618-a096-4ffa22fcbd59",
    "К2 - «Структурный Белый»": "0aa97d42-8b42-4f45-aa20-238eb40fb680",
    "К2 - «Тангент Перламутр»": "0c30c7e0-0b68-49d0-8866-d43ed77b0740",
    "К2 - «Титан Глянец»": "ec9f007e-8728-4287-92a3-617e4cf30ae7",
    "К2 - «Шелк Жемчуг»": "617367f0-6911-458f-bdab-403e3742f7c4",
    "К2 - «Шелк Платина»": "b470c702-525e-4e45-aa30-f8cac9c021b1",
    "К2 - «Шелк Шампань»": "24e15e8f-1bf4-425e-8b80-bc8d037ce95c",
    "К2 - «Шоколад»": "8416abca-cc13-4a2a-b810-84c94c17b2a6",
    "К2 - «Ясень Бежевый»": "0bff1a7b-5085-4562-bef4-0cfe1d3bbc0e",
    "К2 - «Ясень Белый Патина»": "034a20ab-a174-4b0c-8786-0a1db0781940",
    "К2 - «Ясень Жемчужный»": "c669d537-5bd0-4d10-9dde-a356844d712e",
    "К3 - «Берлин Матовый»": "5158cd22-6589-4ba6-95e3-ca9ee6742b41",
    "К3 - «Виолетта глянец»": "90b708aa-9efc-48fd-8b3f-b8784db977b2",
    "К3 - «Манила Матовый»": "e2175745-e2c5-4537-9464-fbf7d59633b1",
    "К3 - «Оливин»": "25cc0cf0-db58-45cf-95a2-fcd35e186b56",
    "К3 - «Сагаста Матовый»": "2298b39c-e2e2-4235-99f3-387ddbb6cc58",
    "К3 - «Серый Софт»": "4fdbad21-69f7-4254-a1cc-d363608a1ccf",
    "К3 - «Беж Нубук»": "8836946e-26ce-4ed6-972e-03cc50294b16",
    "К3 - «Мелиандра»": "7a7de683-7fd4-4e3e-bcd2-c6b41159c2dd",
    "К3 - «Миррис Матовый»": "98bc83f0-5aed-4ce5-a52f-c7767a067e72",
    "К3 - «Мокко Матовый»": "031a9288-c61c-4361-9e57-622bcdd3241c",
    "К3 - «Нефрит Матовый»": "6f192571-232c-42e2-9a58-d620810e31f1",
    "К3 - «Обсидиан Матовый»": "90031397-25db-44ff-864e-2a6098adbb94",
    "К3 - «Сантьяго Матовый»": "a4a0d40c-fcb4-4272-a47f-cc24216ee61b",
    "К3 - «Селемит Матовый»": "eb8316cf-8b58-4c25-a224-2be7efab070f",
    "К3 - «Антарктида Матовый»": "d5a97a43-ce9d-45cd-b51b-3ec5c0614ba3",
    "К3 - «Баклажан Глянец»": "87a4991e-0d4f-47c2-9083-8cd5d5ebecd8",
    "К3 - «Бежевый Глянец»": "6a832d03-4956-45d2-b594-b4e7e756f229",
    "К3 - «Бежевый Софт»": "18e79814-3773-48ff-ac9c-682e6e4a0359",
    "К3 - «Белый Глянец»": "e8ddcf57-8b4f-49e4-9c51-c36ed8b15f9c",
    "К3 - «Болотный Софт»": "6054eeaf-3f2d-4d02-ac6c-c553feee7c42",
    "К3 - «Бордо глянец»": "78ecdac9-49a7-4d0a-8027-0865dc7f7503",
    "К3 - «Бриз Софт»": "7bb1c0c3-3c71-487a-a135-0a3a3592da69",
    "К3 - «Ваниль Глянец»": "01489c36-37b1-4bc3-b362-fe27131fea69",
    "К3 - «Виолетта матовый»": "6a49d70e-2c07-4f51-b71f-7d8b226ff7ad",
    "К3 - «Голубой Софт»": "324491af-fab4-41d7-a066-ee7ab3e9ce10",
    "К3 - «Графит Матовый»": "dd3c170b-b50b-4d12-8ece-1ebe8b52910d",
    "К3 - «Грей Нубук»": "d8987c53-8c49-43d4-8cf0-a58d88e1b65f",
    "К3 - «Грей Софт»": "8197580b-8756-464e-9800-06d600536ce6",
    "К3 - «Дуб Сонома»": "31d504bf-9342-4358-bb06-5d19c873d5f3",
    "К3 - «Желтый Глянец»": "8f393235-8ecf-4d7b-b720-f06c6e07dbbb",
    "К3 - «Зеленое Яблоко Глянец»": "1d1d153e-e82a-4dcd-9f43-38ec6e307617",
    "К3 - «Кофе Глянец»": "42e84900-a706-4b4d-96d7-bccf6c3a6401",
    "К3 - «Красный Глянец»": "335bc4b9-8bc8-40bc-8239-d353eee094c9",
    "К3 - «Лайм Глянец»": "c7d38f36-da23-4ba6-9b68-3bc8d45417b2",
    "К3 - «Лайм Матовый»": "9dfbb87f-7716-4f36-8ce6-f69c3e6be488",
    "К3 - «Лиловый Софт»": "74e8da31-24ed-4bc5-bc73-ccdcb64dc77d",
    "К3 - «Магнолия»": "1ad3c772-8c27-4b7b-bbfd-e0b3e803c1fa",
    "К3 - «Маренго Софт»": "6af62487-aa0a-4aa7-8c92-b6772964a992",
    "К3 - «Мята Матовый»": "41d09eaa-37d7-46bb-b7f3-9bbc225cc3bd",
    "К3 - «Олива Глянец»": "fd0afec4-f89e-40a5-bced-2c929c523e45",
    "К3 - «Олива Софт»": "124824e7-3286-4dfb-9a70-e1d3c99848ab",
    "К3 - «Оранжевый Глянец»": "e8a2f969-4173-46ff-b15a-49d47b93276e",
    "К3 - «Перламутр глянец»": "848a97cf-6e4a-4da1-af98-36af7bf5cba7",
    "К3 - «Сирень»": "8a3277b8-23ab-401b-9752-7c3f19249712",
    "К3 - «Слива Софт»": "f4e08b86-c7cc-44a7-8950-bbd52ccee74a",
    "К3 - «Слоновая Кость Глянец»": "2a0908a4-6ccd-4b26-9abf-fefa7f86cb13",
    "К3 - «Софт Белый»": "15513e4a-ac3e-48b5-b366-3a8fe793ead8",
    "К3 - «Темно-синий Софт»": "6264c7f5-78c4-43fb-bf5e-22ce18eff725",
    "К3 - «Терракотовый Софт»": "88ffbe81-6744-4a7a-9a1e-117d4f30a211",
    "К3 - «Фиолетовый Матовый»": "9a605d6b-84ed-4812-922b-982f26b0b872",
    "К3 - «Фисташковый Софт»": "e96bf9dd-6d05-434a-96d5-715037a669bc",
    "К3 - «Фуксия Матовый»": "ba099549-c517-426e-9bbc-cc6f68e428cf",
    "К3 - «Черный Глянец»": "c9ab775c-b643-445c-8dfb-91ef4fff7026",
    "К3 - «Черный Софт»": "f392603e-f49a-45ac-93d8-02bb1f98204e",
    "К3 - «Шафран»": "11ae4fb9-9cc1-4d6d-9605-fdaeccc01de6",
    "К3 - «Шоколад Матовый»": "047ee690-bf87-4dbe-a480-44e4168aa8c1",
    "К3 - «Эбеновое Дерево»": "8fd5a087-e852-40b0-9229-850b87540520",
    "К4 - «Белый Металлик»": "fd79c9db-be5c-4ee9-bf48-e02707cba9c2",
    "К4 - «Виолетта Металлик»": "3dff87eb-43d3-436d-aa81-8999ba4b89ec",
    "К4 - «Малиновый Металлик»": "b08eb870-b4fd-4ffa-a243-9d54e5690fa8",
    "К4 - «Серебро»": "ee929d26-828d-4da4-b604-3e2d419f695b",
    "К4 - «Сиреневый Металлик»": "bfab99e4-0b64-4e63-8002-1d316d007bd9",
    "К4 - «Страйп Черный»": "df353d97-95d3-4865-8232-e5213d4eed37",
    "К4 - «Страйп Белый»": "50150842-b30d-4530-b1c9-9d57fc6ef097",
    "К4 - «Шампань»": "11a9fd0c-ed79-40fa-91ce-8942954e6a6a",
    "К4 - «Корица»": "892da128-7911-42f0-9177-4279b2d698ad",
    "К4 - «302»": "a0b55022-626f-4082-a6ef-709f7e59c5c9",
    "К4 - «201»": "33cb247c-482f-4b5f-93aa-7b8ead1c3b44",
    "К4 - «204»": "15f9a30f-dce0-4230-b994-e065c800c148",
    "К4 - «303»": "3443c228-9552-499a-8437-0d4d48761142",
    "К4 - «401»": "b00fde01-e87c-4934-ab1f-3dfb34bec95c",
    "К4 - «403»": "ff35bf13-11ab-494c-8f17-9cfd86998597",
    "К4 - «Гранат металлик»": "d397acd3-5f67-4443-9cc7-833fbb51d481",
    "К4 - «Капучино металлик»": "556f282b-0b3a-489f-937a-9b3b4e48eeee",
    "К4 - «Абрикос Металлик»": "8c2ef93a-3655-4463-849e-fdcc7dfdc460",
    "К4 - «Огни Нью-Йорка Белый»": "6d0bc138-4075-4a61-a48e-b86dacc47783",
    "К4 - «Огни Нью-Йорка черный»": "740f8750-93c8-4ee0-9844-072a730765f7",
    "К4 - «Черный Металик»": "0c36289a-f2a5-4fd8-a511-71402013f8bd",
    "К4 - «Шоколад Металлик»": "dd0b23ab-9dfd-48fb-b3d1-345b1a8ad4fc",
    "Белый": "bcfd4196-6d33-4d59-9ab5-7abcd39ab00a",
    "Клен пластина": "d3052de0-3307-4674-bd8e-d1cc579c6571",
    "Ноче": "6ee7f857-f872-4cb3-b68b-f11d208d393a",
    "Шеби": "6b2b648a-496f-4eae-bb0e-c4f9c71f19f6",
    "Металлик Эксклюзив": "d988ea6e-e423-4007-b50c-2213be3fc1a2",
    "Орех пластина": "dfe36289-1d25-4f30-b4e3-8e8d560f774a",
    "Седой дуб пластина": "6800cde6-16b1-4d76-a519-963cc4e96725",
    "Сонома пластина": "49cb902e-d208-4691-a576-b341e8948bb9",
    "Венге пластина": "01b69465-3d17-492e-9480-a72238f07d14",
    "Бук пластина": "b2952458-f689-4f39-bdbf-cfb373ebd13f",
    "206 «Дуб Коньячный»": "1a5ca8c3-7c17-4673-add0-a34fe0c8beac",
    "217 Дуб темный": "921adb4a-ac08-4403-9fc6-8635e6f79cb4",
    "242 «Вишня Дикая»": "d36ac032-5f69-40e1-b2ef-cf9fd6b08090",
    "272 Сосна золотистая": "08928be5-a572-413a-b55e-439ee06cc9da",
    "281 Палисандр": "f2a5f34a-ba55-4efb-a988-58aa009d689d",
    "291 Орех": "10f7d274-8160-4c60-b34f-13d92bf6d8ba",
    "327 «Сантал Темный»": "314bfeca-78bb-4322-af88-161ec11c9c6b",
    "331 Кемпас": "6eeeb840-aae7-4815-89fa-88d48e22ad81",
    "346 Махагон": "c969d07e-ff3e-4074-a0b1-7e5bfe2356ec",
    "Бук - «Лак»": "8dcee363-5894-4ab8-b213-5978ebca79b3",
    "Бук - 331 «Кемпас»": "819bd33e-ee7a-4eb0-b094-4eb3031e4c85",
    "Бук - 336 «Мербау»": "7fa8da3e-b392-4065-9d34-509d1ba5cc71",
    "Бук натуральный": "3ee4bb87-1009-476e-a203-1916390e3528",
    "Дуб натуральный": "1737d458-be34-4bbf-99aa-1e0fafbc779c",
    "Дуб натуральный  219": "513f41ca-0ee6-4aed-aadf-4eda4a6078ba",
    "Лак": "7c7e0414-e0ca-4d8d-904c-c2cddc0af766",
    "Сосна - 206 «Дуб Коньячный»": "29577d81-2176-4a0d-8f41-ccf1c8c88456",
    "Сосна - 242 «Вишня Дикая»": "ef27981d-257a-40a7-9c72-a2d09dde480c",
    "Сосна - 281 «Палисандр»": "c25d2598-f0ee-4d23-a848-4a2cd020d6ad",
    "Сосна - 327 «Сантал Темный»": "cfe23b5e-e8f0-41cd-8284-976728bf1bf7",
    "Сосна - 331 «Кемпас»": "15332837-43db-495b-af59-8ebe48aa16e5",
    "Сосна Натуральная": "fe525595-b119-49ad-a705-9cdd6bdfa624",
    "Сосна - «Лак»": "99afdbe9-7586-4e86-bbc4-80a82d329fa9",
    "Бук - 007 «Черный»": "8c3566fc-9727-4120-a763-c7503ffd4df9",
    "Бук - 206 «Дуб Коньячный»": "a679f376-7787-479f-bf24-4cf073f0db2d",
    "Бук - 233 «Бук светлый»": "93ad5361-f536-4ce7-8445-cd48057d4d6d",
    "Бук - 242 «Вишня Дикая»": "d46d198a-3245-431a-9dbe-41a3a83ea931",
    "Бук - 243 «Вишня Красная»": "d960213e-b4f0-4dd2-9bd6-30eb8784b62e",
    "Бук - 281 «Палисандр»": "224afd35-abee-4d7f-84dd-d12ead156c40",
    "Бук - 327 «Сантал Темный»": "f5196f14-50cb-49e6-b724-d7243fc873ed",
    "RAL 1000 глянцевый": "9ef9f418-c3ac-46ed-809e-8c496625297d",
    "RAL 1001 глянцевый": "de3071d0-7b39-40c6-9562-ec17653f3866",
    "RAL 1002 глянцевый": "aa11e6ed-9162-46d5-93e1-23d7ac2d0901",
    "RAL 1003 глянцевый": "7e907b8f-9c92-4a99-862c-6dc38a61f53e",
    "RAL 1004 глянцевый": "030bd87e-e077-4781-a0b8-6b8d33dfe113",
    "RAL 1005 глянцевый": "f5ab2f3b-724d-4c3f-bb38-849eae4d0596",
    "RAL 1006 глянцевый": "59948b19-e793-48ae-8c61-7b245d694bf0",
    "RAL 1007 глянцевый": "6d68e364-02e2-447d-825d-eb2acd204efd",
    "RAL 1011 глянцевый": "14006a16-fa67-43a4-9fa9-e4cd9200cbe6",
    "RAL 1012 глянцевый": "b4386930-8328-4d9e-b2e7-e0e010cb5999",
    "RAL 1013 глянцевый": "dd1a734f-db39-4b75-b53f-11096ea566cc",
    "RAL 1014 глянцевый": "a903ff2b-b714-4f63-991e-40be9e5c3338",
    "RAL 1015 глянцевый": "9d893b72-d58f-4589-97c5-3bd53dfb8a2b",
    "RAL 1016 глянцевый": "576e77c0-a515-467d-b6eb-6f60325530e8",
    "RAL 1017 глянцевый": "9f9c0476-1015-4803-b77a-c820aec4ae99",
    "RAL 1018 глянцевый": "d39402cb-b349-47dd-bd76-42452a5eec50",
    "RAL 1019 глянцевый": "90c85234-b99b-454a-ac93-333ef2acf4fa",
    "RAL 1020 глянцевый": "86a6c505-24d1-404e-bbf7-0dec3a6f9047",
    "RAL 1021 глянцевый": "4b7ea6f8-9929-4e15-94ee-324800fa8959",
    "RAL 1023 глянцевый": "579878e3-a247-482d-bc37-a7d0c06074dc",
    "RAL 1024 глянцевый": "d750aaae-d5c0-4ecb-9286-0f817a65e59d",
    "RAL 1026 глянцевый": "4d5bd105-2112-4750-99ca-f154973a96e2",
    "RAL 1027 глянцевый": "173813ee-1696-4d95-b6e5-a99583479b2c",
    "RAL 1028 глянцевый": "212b698a-a71d-4d2f-a7a2-4116d3a0b6e2",
    "RAL 1032 глянцевый": "b9a53c7e-3aad-4773-a335-969b7766838c",
    "RAL 1033 глянцевый": "97992428-1e06-4408-926c-18e9bfe507c2",
    "RAL 1034 глянцевый": "51b93896-e90d-4ba9-8f26-5ecb1c8bcf1b",
    "RAL 1035 глянцевый": "9dd4c198-b81f-4fac-a1ba-c4c66224d8ff",
    "RAL 1036 глянцевый": "defa2563-10aa-4907-b312-ee462e8a9144",
    "RAL 1037 глянцевый": "2bfba428-d99e-43ae-b9ee-ad656b349805",
    "RAL 2000 глянцевый": "f1e83471-4efe-4394-925d-53fc40653f56",
    "RAL 2001 глянцевый": "bd54a75a-dee8-4a8c-9de2-44b49e5e2860",
    "RAL 2002 глянцевый": "436d41e7-b2f7-40d3-80e8-cb8b0d1d52ba",
    "RAL 2003 глянцевый": "7e8108e8-791a-4a88-ad47-9f3a07e1ef7b",
    "RAL 2004 глянцевый": "38b4172f-e491-47ea-b8f1-6ce27665c4df",
    "RAL 2005 глянцевый": "be0044d6-1544-4cab-ad26-a65a7c53457e",
    "RAL 2007 глянцевый": "7bb7fbf5-f932-4a54-871e-af1725a616f9",
    "RAL 2008 глянцевый": "91711a49-ec1f-4e1b-bff2-061bab29b400",
    "RAL 2009 глянцевый": "12411681-0027-4925-9e84-422587b936be",
    "RAL 2010 глянцевый": "cce316a7-1e80-4254-a692-64c266461e33",
    "RAL 2011 глянцевый": "b28feb4a-00d6-4ff1-a449-5956010680dc",
    "RAL 2012 глянцевый": "1fba2ee7-5180-44a9-a5fc-442e28e28d56",
    "RAL 2013 глянцевый": "fbb27739-1aa3-4989-8ba5-856d1fec2399",
    "RAL 3000 глянцевый": "ae6894fa-90d4-46ca-87b8-aa4ef6fe72b5",
    "RAL 3001 глянцевый": "f3033787-4869-46dd-8778-0b3e3eaf4589",
    "RAL 3002 глянцевый": "9610152b-59af-49c5-b08b-0dc9563bdebb",
    "RAL 3003 глянцевый": "c04f3be2-49e1-4c50-a50e-01e25f7e7106",
    "RAL 3004 глянцевый": "90f945df-b9c1-4478-9bc7-b375e7b2c746",
    "RAL 3005 глянцевый": "458eee51-2ba7-4c98-8905-e84583be7a80",
    "RAL 3007 глянцевый": "6f74015d-ada0-4e39-9d12-5a5f41874c55",
    "RAL 3009 глянцевый": "07ddc1f3-7c26-4832-bcdb-7ca5f4ed0639",
    "RAL 3011 глянцевый": "8b901bf0-46af-4f68-86e4-c20949cdba2c",
    "RAL 3012 глянцевый": "c2edf988-6ce0-4368-b564-5fce0f8e378e",
    "RAL 3013 глянцевый": "d7120c53-f27e-403a-864e-29a44d0d9f44",
    "RAL 3014 глянцевый": "a0ead048-433d-42fc-9ee5-7ed3bb458495",
    "RAL 3015 глянцевый": "0d7da652-be01-4821-8e16-61c58e72687f",
    "RAL 3016 глянцевый": "5b51a614-d1d0-449d-ada5-038ff246ede4",
    "RAL 3017 глянцевый": "86f4dba7-5600-42fd-96eb-c51d3e9a52d5",
    "RAL 3018 глянцевый": "84c02260-ea80-4038-aeee-743add394b72",
    "RAL 3020 глянцевый": "4a41d73e-9417-4451-a2cf-8985954bc8e6",
    "RAL 3022 глянцевый": "e9811c1f-019a-4df6-9ab8-70c3039d87c4",
    "RAL 3024 глянцевый": "cc273168-fcc4-4c9b-b120-263282764483",
    "RAL 3026 глянцевый": "a0362d21-cd42-4e17-b458-19d90e7edb9e",
    "RAL 3027 глянцевый": "12c07ff9-fa0c-43e9-b4df-18c2152165db",
    "RAL 3028 глянцевый": "b799db81-3554-4c56-a983-8a94a467eca7",
    "RAL 3031 глянцевый": "bca702a1-e3b5-4eaa-b637-606863fb8733",
    "RAL 3032 глянцевый": "fe9b4365-2727-447a-91c6-ea54a5c76e1c",
    "RAL 3033 глянцевый": "22a5950b-27c2-412c-b2c4-afa7e8127e0c",
    "RAL 4001 глянцевый": "2af39339-7710-4c7c-b783-8dfdf21f310f",
    "RAL 4002 глянцевый": "cb7dda7d-bd80-4805-9198-f44d661b9905",
    "RAL 4003 глянцевый": "310fa9ac-4b90-46bc-9014-d0c5a33cbd80",
    "RAL 4004 глянцевый": "07177091-ee6a-4d68-a48c-7d63f71d7b3a",
    "RAL 4005 глянцевый": "2ea70ad3-b843-40d4-8df3-3796f2246f00",
    "RAL 4006 глянцевый": "322f247b-9fca-4773-af01-ebf9b24e150b",
    "RAL 4007 глянцевый": "bf9db6a2-7f64-4a02-ac23-be8822027ae6",
    "RAL 4008 глянцевый": "c10c1f90-ff7f-4c74-ba8a-e85bab6b75a5",
    "RAL 4009 глянцевый": "5924b6ac-4236-4fed-a757-61fd12ebcaa2",
    "RAL 4010 глянцевый": "b18c356e-9c25-4897-93bf-84bb60b86f86",
    "RAL 4011 глянцевый": "7e99c8fb-5511-4fab-ac76-3e75aa5b095f",
    "RAL 4012 глянцевый": "da22c698-c1b7-4c1b-a35e-65fa302d0bb5",
    "RAL 5000 глянцевый": "6de6f758-bf0e-4882-8bed-51ef40f34ef0",
    "RAL 5001 глянцевый": "4fe90315-69e9-4e42-b942-ff4e4a6dddc5",
    "RAL 5002 глянцевый": "a3246c78-f820-4665-a2be-6d6483376950",
    "RAL 5003 глянцевый": "6a7c82d7-2ea6-42cf-8c27-adca9c5f2bdd",
    "RAL 5004 глянцевый": "8a43ab3f-e1a8-4227-b2d4-15ba091070ce",
    "RAL 5005 глянцевый": "45eee662-eed1-48c1-a45d-fdb519abd36b",
    "RAL 5007 глянцевый": "096c7042-5784-4437-880a-35a181cd61d6",
    "RAL 5008 глянцевый": "15a6796b-e652-4c78-8dab-b950ce5f8066",
    "RAL 5009 глянцевый": "47b8dda7-6cea-466f-8ec2-dc5d6bbc6383",
    "RAL 5010 глянцевый": "678831e6-fff8-4945-b677-9d36b06ace46",
    "RAL 5011 глянцевый": "994f7854-23b8-4676-af01-31b196d554f0",
    "RAL 5012 глянцевый": "bc206f39-957c-4c53-80d4-87fc71f3b532",
    "RAL 5013 глянцевый": "c0a10488-2266-45bf-9aef-31a08077e752",
    "RAL 5014 глянцевый": "67d7ed2c-bc07-433c-b44f-8a8ee00408fd",
    "RAL 5015 глянцевый": "4d0357c6-19bf-401f-af87-db0f73c43334",
    "RAL 5017 глянцевый": "e3ee6ef9-f81c-4af1-a212-1bc085f9f98e",
    "RAL 5018 глянцевый": "879e7fe6-818c-45a3-ac33-6b5baabd4373",
    "RAL 5019 глянцевый": "6532f344-e71f-4053-82d4-0d886bcd4919",
    "RAL 5020 глянцевый": "d538a7bc-ed33-42ae-8fae-e6db19bfc506",
    "RAL 5021 глянцевый": "ddb033d4-8c4d-4f59-9cf8-399b89ce74c5",
    "RAL 5022 глянцевый": "e6c224bc-7e45-4d22-a11a-855b2591329b",
    "RAL 5023 глянцевый": "5de4543b-4b8b-4ce7-82be-0caa678ac4fb",
    "RAL 5024 глянцевый": "cab0ac08-a588-4d07-8b97-70a3925e7e35",
    "RAL 5025 глянцевый": "23e2ee91-3c1a-4dca-8f70-e2fab38b0d56",
    "RAL 5026 глянцевый": "81281ed4-6a1d-4fad-8ac3-9a9e24cee5be",
    "RAL 6000 глянцевый": "7d306e30-031d-41d2-9638-b0030e8303a8",
    "RAL 6001 глянцевый": "bbd0815f-b832-4c6a-a757-6de7641824ba",
    "RAL 6002 глянцевый": "551af68a-e4b0-443d-843b-6d22923372a7",
    "RAL 6003 глянцевый": "53406281-9873-40a7-b36d-aafec5909e04",
    "RAL 6004 глянцевый": "883f5419-ac97-468b-b1c0-9a345381949e",
    "RAL 6005 глянцевый": "d98fd4d3-3b4f-4113-8f8a-ec7fb16d5001",
    "RAL 6006 глянцевый": "63cda28c-6f5c-4efc-a231-006a1c106830",
    "RAL 6007 глянцевый": "48b579d0-51c6-42e9-82b6-e981ad4248f0",
    "RAL 6008 глянцевый": "1741faba-3d46-4e2e-a7ad-587f7f9d8ec8",
    "RAL 6009 глянцевый": "58d6be4a-cc3c-459b-9fa2-7c30ac2651d8",
    "RAL 6010 глянцевый": "56229e2e-573e-4e05-8b6c-14ffc73b8e6a",
    "RAL 6011 глянцевый": "c0531c38-ab7f-4e56-ae6c-0bd977415647",
    "RAL 6012 глянцевый": "9fec4937-6c26-4d9f-b85f-418a38602cab",
    "RAL 6013 глянцевый": "63d58e9a-657f-4107-a14d-7889708b1643",
    "RAL 6014 глянцевый": "91944270-dcb7-4fae-befb-d809c61a1100",
    "RAL 6015 глянцевый": "2c3a5688-bd34-4499-968e-0930314bef47",
    "RAL 6016 глянцевый": "7ff62bf9-5501-4082-ad00-a86a02ad37f9",
    "RAL 6017 глянцевый": "08170616-4355-4367-8ac2-52c58bff46f0",
    "RAL 6018 глянцевый": "25ba0296-3dde-4d74-b91e-3e660762db03",
    "RAL 6019 глянцевый": "f2d25a3d-84b7-4f1d-928c-b4e31e884d5b",
    "RAL 6020 глянцевый": "14c8833d-9f2c-4d53-8739-9285830a80d9",
    "RAL 6021 глянцевый": "f627fd20-cd97-4493-8794-bf89a4b38e31",
    "RAL 6022 глянцевый": "2abbfa37-797b-426c-9c25-da18281e91aa",
    "RAL 6024 глянцевый": "16d5b7ed-e039-45e4-ac4d-9ac5401d7d99",
    "RAL 6025 глянцевый": "6d10a38a-ed7f-4e7b-844f-b54c5713ec92",
    "RAL 6026 глянцевый": "73d60f05-ee0c-4eeb-bf81-af98048c6645",
    "RAL 6027 глянцевый": "c98fe213-9818-41ad-b8af-91df77fbb590",
    "RAL 6028 глянцевый": "fe3327a7-2db5-4ec3-9f1c-e987d7dca534",
    "RAL 6029 глянцевый": "bb1f7a6e-5822-4eee-9de8-47c8edf17178",
    "RAL 6032 глянцевый": "b3731d51-e9d2-4fec-bc32-115ae2b07acb",
    "RAL 6033 глянцевый": "35411713-a4c0-43d4-8bcf-0841a90c9c88",
    "RAL 6034 глянцевый": "3fbeaaec-d094-4034-9e4e-c5ec6b75dd41",
    "RAL 6035 глянцевый": "27973a6d-0430-44c5-a2eb-27376682ddf4",
    "RAL 6036 глянцевый": "6ed5af59-ab9d-469b-abc5-622d03bcca8a",
    "RAL 6037 глянцевый": "ff2b2c2f-c0eb-4705-99e1-6c158a7fe8f1",
    "RAL 6038 глянцевый": "e68057c4-02ed-454c-beb7-8d919a557441",
    "RAL 7000 глянцевый": "a744eb90-4de9-4830-8c4a-bc064e71f440",
    "RAL 7001 глянцевый": "fde06ce0-ffa5-4d01-bca7-19a5366a6e81",
    "RAL 7002 глянцевый": "f1c146e4-5ebe-46b3-a1d6-fa2655f32563",
    "RAL 7003 глянцевый": "473d9c29-7a60-4faa-80aa-ef71ad70923e",
    "RAL 7004 глянцевый": "892ba1d6-3c9a-42e4-a5ea-64bf1a876b47",
    "RAL 7005 глянцевый": "75913d0d-dff5-4517-a6a4-f596bdebc34c",
    "RAL 7006 глянцевый": "62d0c8f1-0281-4336-a267-e66c53de4630",
    "RAL 7008 глянцевый": "778cc9b0-0c12-4708-9537-7832d1588f49",
    "RAL 7009 глянцевый": "a514018a-ab59-4af5-895d-6f9210346eac",
    "RAL 7010 глянцевый": "c5001ebc-3a31-4739-bd88-acf62b14bfac",
    "RAL 7011 глянцевый": "1adf6f42-dc29-48af-b975-9cd1b7a609a0",
    "RAL 7012 глянцевый": "cd708a95-49c6-40d6-9ea9-c381788cbe53",
    "RAL 7013 глянцевый": "ccdab4dc-a08d-4fc9-a96e-bb96efa52b7b",
    "RAL 7015 глянцевый": "2d149ca0-f8e8-4797-9c61-df279e3573cc",
    "RAL 7016 глянцевый": "7f14ee7a-37f6-45e5-89e5-b11f1811dad1",
    "RAL 7021 глянцевый": "75b84ac5-5898-44f2-86fb-f7ffadb8d748",
    "RAL 7022 глянцевый": "f0ccef37-ddb8-4f5f-9eb7-62210072d354",
    "RAL 7023 глянцевый": "9fdb7f6c-e955-467c-81a3-eb0383dba2c2",
    "RAL 7024 глянцевый": "dae896a3-fa32-463f-bee6-cb4e5ad5974c",
    "RAL 7026 глянцевый": "9e6fd5a0-516c-41ea-bb82-35b7ec505a8d",
    "RAL 7030 глянцевый": "4193a709-3471-404c-b1c1-e4108f2eb589",
    "RAL 7031 глянцевый": "ee17f4d3-4538-4e6e-b224-7e49c0581cbc",
    "RAL 7032 глянцевый": "7ba584ff-34d6-4828-b281-91f946895cc3",
    "RAL 7033 глянцевый": "e3dbcf6e-0740-46f3-b5d0-e4531184ef30",
    "RAL 7034 глянцевый": "8861295f-9031-4ca8-a1ea-349445694877",
    "RAL 7035 глянцевый": "9ee64bb2-77dc-4003-9d58-30b475728fc1",
    "RAL 7036 глянцевый": "e8b8089f-cb88-4aca-a76a-3cdc39e4cad2",
    "RAL 7037 глянцевый": "d62eaee7-2ccf-4f05-a67d-bbb7473d7aa3",
    "RAL 7038 глянцевый": "069161b6-2ffe-49ac-b81f-1cff392623de",
    "RAL 7039 глянцевый": "88ed6690-73bb-4532-a847-a40c72264f30",
    "RAL 7040 глянцевый": "9da54929-b654-42e9-9eb8-c7a3a4cde8da",
    "RAL 7042 глянцевый": "b929e335-1769-4e13-ba7f-59b38ff5f0fa",
    "RAL 7043 глянцевый": "421d5355-ce1b-434e-8de4-1c06f553450e",
    "RAL 7044 глянцевый": "0304ead3-01fc-43ef-b489-8ba349c3bb51",
    "RAL 7045 глянцевый": "3812887b-33ec-4e27-8859-ecc407556200",
    "RAL 7046 глянцевый": "013def35-7303-482b-9c24-f94eb84feb90",
    "RAL 7047 глянцевый": "418a5bed-b3ad-4e08-9277-6346df2b5caf",
    "RAL 7048 глянцевый": "a1cb5cc1-ee39-4180-89bc-8e0b60bbb4b9",
    "RAL 8000 глянцевый": "e897e3ad-e7ab-492e-be80-2cf88c86d145",
    "RAL 8001 глянцевый": "5e09760f-44b8-4282-a4b1-0242ac4ea5ff",
    "RAL 8002 глянцевый": "1456f1db-f7aa-4750-968d-72898ef208ad",
    "RAL 8003 глянцевый": "3e47fb0a-938e-490d-b2ad-c47490df7e76",
    "RAL 8004 глянцевый": "410af5ce-08c0-41a9-a601-03f3edbe55b8",
    "RAL 8007 глянцевый": "985b35d2-830d-4979-895a-d3b088007467",
    "RAL 8008 глянцевый": "1de4e9b3-8e8e-4bf8-bd97-cf2608c735dd",
    "RAL 8011 глянцевый": "ff18202f-20bf-4b03-8307-2458feaac4bb",
    "RAL 8012 глянцевый": "d646eece-0109-4598-8e49-c4b3c7cd3be7",
    "RAL 8014 глянцевый": "a1424214-6e04-41b2-97ea-b05be5d810a2",
    "RAL 8015 глянцевый": "1121ce73-bb3c-4bf7-9880-6d28a9a8e238",
    "RAL 8016 глянцевый": "a56e3b02-d265-4510-9b07-acedc5155e41",
    "RAL 8017 глянцевый": "a6f8cea6-204f-4634-93e8-cee0bebf0e63",
    "RAL 8019 глянцевый": "06fb5c95-bf96-4cc0-a3bb-ff3a5938104b",
    "RAL 8022 глянцевый": "e5b1d74b-56d2-42ae-bbd9-13b24e732260",
    "RAL 8023 глянцевый": "5f1409ee-9e93-44b7-bf0c-daa8933a7d8d",
    "RAL 8024 глянцевый": "49802175-46d1-4b8e-948e-e958e5ffab0d",
    "RAL 8025 глянцевый": "e1d8c627-8d1b-4186-a2e6-c14b5ba595c6",
    "RAL 8028 глянцевый": "7df29c81-dbc8-4833-b294-840659f100a5",
    "RAL 8029 глянцевый": "7796f161-3bff-43ff-891b-182d53480cff",
    "RAL 9001 глянцевый": "4ec47171-b35e-48d0-95c2-4bd942d0c0f5",
    "RAL 9002 глянцевый": "ba1d44bc-8573-4a3d-b96c-53bbcf0114f3",
    "RAL 9003 глянцевый": "4e4b7764-5429-4ece-a904-b8d633f04603",
    "RAL 9004 глянцевый": "6bd86992-9b4a-40f3-928b-097f68302b7f",
    "RAL 9005 глянцевый": "47b4fd01-255d-444d-8434-a3721cd3ca02",
    "RAL 9006 глянцевый": "f4de9254-be73-41c2-85cf-f073c66d90d3",
    "RAL 9007 глянцевый": "52d869a7-8667-4016-b51c-41ed1ad3ccde",
    "RAL 9010 глянцевый": "72bd9ce2-4123-4f88-af43-99cd42fddd93",
    "RAL 9011 глянцевый": "44fe52ff-c6ed-4634-a3bf-059e076a0224",
    "RAL 9016 глянцевый": "8448d09c-2410-4282-9433-10d250ab2371",
    "RAL 9017 глянцевый": "fcf6e98e-3d94-4449-ba8f-868d25344398",
    "RAL 9018 глянцевый": "98412d47-6031-4cb8-81d1-3542f0ef9071",
    "RAL 9022 глянцевый": "91066bfe-ba98-4bba-89e0-70dccbfbeee8",
    "RAL 9023 глянцевый": "23f049fb-e63d-4d4f-8554-6ea8b18c654d",
    "RAL 1000 матовый": "be955361-9c56-4608-ab09-552e6d84c335",
    "RAL 1001 матовый": "16258923-d1b6-4b92-8853-0ef4994d8321",
    "RAL 1002 матовый": "5bbc4c91-84b9-45a7-a875-0da09195b4f9",
    "RAL 1003 матовый": "9a726d37-bf07-48d4-9b58-84b34f26c91a",
    "RAL 1004 матовый": "8623d8de-faf1-4a19-b45e-528c7c0c2934",
    "RAL 1005 матовый": "25ef0738-f7a2-430f-af4e-656e75943ef7",
    "RAL 1006 матовый": "7ba724b8-a390-49a4-9613-953212f3b7ef",
    "RAL 1007 матовый": "3a401073-7def-4d31-b0d6-0624a166072c",
    "RAL 1011 матовый": "52c62016-82c5-467a-b563-196f2b3efddf",
    "RAL 1012 матовый": "05e358ff-6099-4446-9b0a-18799d351b9c",
    "RAL 1013 матовый": "145f6fb2-cabb-4e5d-93f0-ea50bf900fbb",
    "RAL 1014 матовый": "7566207b-e5bb-4ba3-8b53-2acce4a289ee",
    "RAL 1015 матовый": "dc1f7800-63e9-4389-848f-ae187a2e9b5e",
    "RAL 1016 матовый": "5777d554-94a1-4b05-8fc4-89bac80c992d",
    "RAL 1017 матовый": "895a06ab-4418-479e-b8be-4fa26b32ca00",
    "RAL 1018 матовый": "e67de836-6a38-489b-addd-b2d90f661895",
    "RAL 1019 матовый": "0c8a33b9-3ffc-49c6-8303-fe7317287183",
    "RAL 1020 матовый": "3ab6a090-2dbd-4916-9506-e2bbe6653343",
    "RAL 1021 матовый": "5dea10ec-68b3-479b-a813-06120014043f",
    "RAL 1023 матовый": "fb6be85c-2314-4e8a-83e3-7a54eeea167a",
    "RAL 1024 матовый": "fbae1f80-495b-4aa4-9702-f4fabd88c84b",
    "RAL 1026 матовый": "33b9a6bc-abfb-46fe-9a43-0e4de99a4b4d",
    "RAL 1027 матовый": "a91762a8-6f93-45b0-950c-91aa5854499c",
    "RAL 1028 матовый": "e58792e9-43d3-4834-bd5f-7f72ca895c99",
    "RAL 1032 матовый": "a870b178-27c2-4a9f-851b-21ea3e2ea1b0",
    "RAL 1033 матовый": "5db88658-0c50-403c-a919-36b7066414e6",
    "RAL 1034 матовый": "3183c61c-981f-4c01-948e-388779575075",
    "RAL 1035 матовый": "730ea0c2-0385-460c-b184-fc67e57a0544",
    "RAL 1036 матовый": "96cefd59-e1cd-43e0-ace4-e7c62c912408",
    "RAL 1037 матовый": "43f02d23-8b9f-443e-a524-7da735688552",
    "RAL 2000 матовый": "545ca7af-b0b7-44e9-bf30-419910b4f47c",
    "RAL 2001 матовый": "4103d653-39c6-4ca6-8ad2-80f379d2915a",
    "RAL 2002 матовый": "d160de31-6453-489b-b136-8846f0eeb3c6",
    "RAL 2003 матовый": "640a5072-6ead-4697-82d0-fee649efc864",
    "RAL 2004 матовый": "595f71f0-8536-4695-958b-f313edbb20b4",
    "RAL 2005 матовый": "e5faf636-9667-44fb-bb21-2b2e49b370c7",
    "RAL 2007 матовый": "9aa4fcb7-d87d-41c4-8679-d97e1fe08bf9",
    "RAL 2008 матовый": "9694a6ff-a8b6-4dc9-910e-94fee5ef5acd",
    "RAL 2009 матовый": "35ca33d9-579a-425c-8d9c-f6e515dd42b2",
    "RAL 2010 матовый": "24b1e16f-613c-4fee-b128-a67dc53b2a2c",
    "RAL 2011 матовый": "e1af27eb-d741-4d3e-a12f-1b6db583b4d5",
    "RAL 2012 матовый": "63ffe05a-92c8-4c5d-8e8e-0e3cf200ba61",
    "RAL 2013 матовый": "acf19b14-9ea6-4d06-bd18-d5ae69f0a492",
    "RAL 3000 матовый": "db44a320-f18e-4cc3-bba4-67116502f73f",
    "RAL 3001 матовый": "0e8bb118-3eff-4219-ac16-2db55e4e8bb5",
    "RAL 3002 матовый": "ae7ebb51-6ee4-4848-8dba-7b65c8158f69",
    "RAL 3003 матовый": "6ac12f7c-1826-4b86-8d10-1f5f52dbf2a7",
    "RAL 3004 матовый": "f4564f6f-83b6-4f57-8026-5973d18936bd",
    "RAL 3005 матовый": "08f818eb-87af-47d9-9874-7ff2540f249c",
    "RAL 3007 матовый": "a818be84-8c38-46cf-9c66-7c47c4cb0e71",
    "RAL 3009 матовый": "6fc57c78-3847-418c-8360-70768fc22985",
    "RAL 3011 матовый": "3c82c17e-ef70-4c6e-9963-4f19c3e0b118",
    "RAL 3012 матовый": "940f049e-8149-4c69-8ec2-a82a5e3e5b25",
    "RAL 3013 матовый": "ece259d0-267d-41b7-ad24-ccd44a962d99",
    "RAL 3014 матовый": "63d0e43f-b9db-4ae6-bfc2-ab85a8e8ba37",
    "RAL 3015 матовый": "28b3e190-8719-4e2f-b405-f9ed54702ac1",
    "RAL 3016 матовый": "67ab9cb8-55ff-43c0-904c-b94d1a3dbb48",
    "RAL 3017 матовый": "99618ae9-6ac8-4e9b-b45b-442927363750",
    "RAL 3018 матовый": "c7ff532d-453d-4f09-b59e-47c971ffd4da",
    "RAL 3020 матовый": "d9b5a3e1-1785-4fc7-943e-ee25e6b5df81",
    "RAL 3022 матовый": "a96dc8df-b422-4759-9f97-38e4a368a9a2",
    "RAL 3024 матовый": "3745241b-c87a-425a-ad07-939a5121ce4a",
    "RAL 3026 матовый": "4965109d-71fd-49cb-8f3e-ba208c0b9ca4",
    "RAL 3027 матовый": "c3f3fc98-96a2-4270-8543-d871d0dd2757",
    "RAL 3028 матовый": "803bff51-0357-4a18-a3af-528591e3610e",
    "RAL 3031 матовый": "415b9b0d-5d0f-4b02-bb5c-6ddd611a715b",
    "RAL 3032 матовый": "cb39cc80-14dc-42f8-b087-68fda8a1a39f",
    "RAL 3033 матовый": "4426396b-3c2c-4712-9418-e28ee455cea4",
    "RAL 4001 матовый": "20c25eb0-f9cc-4504-be22-26d924c8616c",
    "RAL 4002 матовый": "c878df85-a8db-48b8-a155-b5bb1db5e32c",
    "RAL 4003 матовый": "00bb94a7-a12e-497b-8ea2-c4524a95ff4d",
    "RAL 4004 матовый": "cfff2bc0-59de-4edf-8961-60b078672298",
    "RAL 4005 матовый": "c413717a-7155-448e-aa18-65e58a77b172",
    "RAL 4006 матовый": "d886467a-7b3e-4d13-a8fe-79bdeda2512e",
    "RAL 4007 матовый": "38ae759e-5de6-4907-ac93-f75f15e88cac",
    "RAL 4008 матовый": "03fedb14-fde4-4e22-9562-fca5ba507a1d",
    "RAL 4009 матовый": "9c440ae7-8397-41a5-9932-a2d30e8a3261",
    "RAL 4010 матовый": "3fa0ee3f-905a-4290-a8fa-a0bc174b17d6",
    "RAL 4011 матовый": "567d86cb-3ca9-496a-a0e3-af9125c5f442",
    "RAL 4012 матовый": "fa6ee9f1-242f-48e5-8499-43b86efd8a4b",
    "RAL 5000 матовый": "12c55b4d-c1d0-4c00-b5c6-6640f33a3ab6",
    "RAL 5001 матовый": "a54fcb77-4ca9-4006-a502-b93fdac1a179",
    "RAL 5002 матовый": "93f6842b-d62e-4e32-ba21-ce323c753ad2",
    "RAL 5003 матовый": "febdd6b3-ea48-4b89-a7d5-0cd3b38676d6",
    "RAL 5004 матовый": "e25ab486-8c2c-48c8-a196-f161db11a073",
    "RAL 5005 матовый": "13b2b778-52a3-4fb8-82df-eac7d4b0f0b0",
    "RAL 5007 матовый": "7aa03536-a080-4a14-9888-d1412c8cfa09",
    "RAL 5008 матовый": "231dfc02-e78f-4410-a1df-f7c5fa7f2442",
    "RAL 5009 матовый": "032ef450-529c-45b6-9ad2-3a87b0f7c60a",
    "RAL 5010 матовый": "9c902551-08be-4834-965c-1d8d7e483518",
    "RAL 5011 матовый": "77a843ef-21da-4ec1-bdef-606493ff4160",
    "RAL 5012 матовый": "edfa2761-91bc-41fc-bdaa-4692e9e6ce22",
    "RAL 5013 матовый": "926a0149-acab-46e0-aebe-c7af1d460795",
    "RAL 5014 матовый": "9daf1f3c-cec5-45ce-9dcc-55b454d07d5e",
    "RAL 5015 матовый": "03cdc616-f363-44f5-ad84-d0cf036b84f1",
    "RAL 5017 матовый": "e58bce2e-8501-4f40-b793-52d58933d7c8",
    "RAL 5018 матовый": "b131e45f-6f70-4c0c-9c65-82d99362b398",
    "RAL 5019 матовый": "671342fb-a632-486b-b877-b0d29d29463b",
    "RAL 5020 матовый": "268a2d84-581f-471e-b4c2-4323e85f2c3e",
    "RAL 5021 матовый": "369884b1-aff8-4cb3-ab9a-34e909088ef1",
    "RAL 5022 матовый": "c8fb4a41-50c7-41ad-be3c-ac660acaacfb",
    "RAL 5023 матовый": "12647865-cd76-423e-8cb2-e94fee9e414e",
    "RAL 5024 матовый": "bb2db76f-e525-4bae-8874-b8a191f67d06",
    "RAL 5025 матовый": "bb8c81a1-123c-43be-aab8-bb302a1968b8",
    "RAL 5026 матовый": "0d0c513d-19f9-4bc1-9865-357d6bb31d7c",
    "RAL 6000 матовый": "8375502c-f9a2-4dc1-b183-30b193ca176a",
    "RAL 6001 матовый": "5d9706c7-4a9a-4e6d-97db-eee08922b70d",
    "RAL 6002 матовый": "e79b947a-906c-4a22-b0be-c46af012e4be",
    "RAL 6003 матовый": "dc6343ad-b2ed-4865-962f-0f176f6e48eb",
    "RAL 6004 матовый": "95fc740e-7b73-445b-b19a-32de6c133c89",
    "RAL 6005 матовый": "ff009e47-7d49-4e5d-a2f4-b2b285c0a3fd",
    "RAL 6006 матовый": "335f0255-90aa-4695-9745-29470f29f4f8",
    "RAL 6007 матовый": "4eb34887-cd13-4b5f-9eca-eccc88dae7d5",
    "RAL 6008 матовый": "71630e5f-acf1-4f0b-b09e-2b89c6aee5a6",
    "RAL 6009 матовый": "eb5cf842-d379-40cb-a8dc-513ac57ea3e2",
    "RAL 6010 матовый": "e01fb715-f337-4e17-b1c4-db3cc928cf63",
    "RAL 6011 матовый": "b73e8913-1f98-46d9-88de-eef6913d31c0",
    "RAL 6012 матовый": "05f9b824-7677-4eb8-b96c-cf8bcd0234c6",
    "RAL 6013 матовый": "c9b9d383-edf3-4a2f-ac7a-636ed683b551",
    "RAL 6014 матовый": "f5a31406-1e6e-4ddd-a2b6-a73c8de7b1ab",
    "RAL 6015 матовый": "e5db2a78-9e4c-40c3-8421-2b8e92b2ea89",
    "RAL 6016 матовый": "ed56a085-aab8-4751-819b-a473d5639d70",
    "RAL 6017 матовый": "beec828b-f2a4-4583-82b3-300871e6d9f8",
    "RAL 6018 матовый": "2c1b9f04-4911-4889-a84c-52f9cb87829a",
    "RAL 6019 матовый": "b5a98388-3aad-4ae3-948d-bbdfb260705e",
    "RAL 6020 матовый": "c318c2e2-6676-43d5-9dfe-dca7eb219fa2",
    "RAL 6021 матовый": "258fd65c-6e00-483b-8f68-2443996fcbd1",
    "RAL 6022 матовый": "d60072e3-02ad-4f56-9d8e-0749c47893eb",
    "RAL 6024 матовый": "8577e8da-b0f5-443d-8c68-0f58ce3ee955",
    "RAL 6025 матовый": "0a395f39-cb9c-4d47-9091-73ddb47cf14d",
    "RAL 6026 матовый": "ee11fc7e-40d2-494e-ba71-5ba277435b14",
    "RAL 6027 матовый": "2b409b3e-af04-47b9-9035-f1f50f5c7f94",
    "RAL 6028 матовый": "33e0ee67-4dfc-405b-955f-a5b039c8ac9c",
    "RAL 6029 матовый": "8188a9c4-dd72-4b8b-bff8-bd3dcec7f115",
    "RAL 6032 матовый": "c085fdc5-706e-40c5-a70b-51b8769b85f2",
    "RAL 6033 матовый": "8686232c-11ae-4543-9aef-18e250d791ae",
    "RAL 6034 матовый": "ca7122b5-2b74-48c1-8045-3dface4218a3",
    "RAL 6035 матовый": "3a1e8b86-77cb-46d4-812f-4e43d9692d10",
    "RAL 6036 матовый": "fc8541bb-9d81-4baf-968b-82ada42752e4",
    "RAL 6037 матовый": "5dece47d-babb-4c8c-88ad-782c2a3e2bdc",
    "RAL 6038 матовый": "ea84461e-d144-4356-82e2-03dc7a70e34b",
    "RAL 7000 матовый": "5994d14d-288e-4736-9c5d-ed20d8188780",
    "RAL 7001 матовый": "0f118dfb-3151-4ad0-bdcd-a8c9fb426ced",
    "RAL 7002 матовый": "56c11f93-dd29-4670-b8e4-a40fcaa3b726",
    "RAL 7003 матовый": "fb4c539c-b666-40a9-934e-96e0fa77f21e",
    "RAL 7004 матовый": "d1f1f56d-f555-494d-97dd-6214cef73040",
    "RAL 7005 матовый": "c87eaab7-8741-4097-a510-8f9f5b1755a7",
    "RAL 7006 матовый": "e735c1ec-b1ed-4df2-8ffe-ec9b17787f56",
    "RAL 7008 матовый": "717bad91-034b-4c91-8a8a-fbd938c70a67",
    "RAL 7009 матовый": "6a16659e-5c72-44f7-b06b-0304c3388154",
    "RAL 7010 матовый": "1ab34c2c-fa9a-4ecd-8ef0-8d368f2494ac",
    "RAL 7011 матовый": "94e1ef7f-98e5-40a6-a58b-c7dd73b1c1a2",
    "RAL 7012 матовый": "caa9f324-e79b-4455-b013-9ecaa63c85bc",
    "RAL 7013 матовый": "54bb7975-01ba-46d2-abf5-c7f59d34d249",
    "RAL 7015 матовый": "51c1e28e-f4af-46c2-a2eb-49724a43e02e",
    "RAL 7016 матовый": "8cabe185-05fe-42c1-9192-36efed507484",
    "RAL 7021 матовый": "e53a0590-7067-41ae-8445-ec8b83ee6e69",
    "RAL 7022 матовый": "30388cb1-5fcf-4132-82d1-8e166355c580",
    "RAL 7023 матовый": "b1c9a218-d3fd-471b-951b-ce4c5899af39",
    "RAL 7024 матовый": "fab16346-a58b-41bf-aadc-25bcf9784e17",
    "RAL 7026 матовый": "6c562b97-5b42-4173-bb4d-5e9dc12d6595",
    "RAL 7030 матовый": "77ad7ba1-da25-424d-a76d-67791e8f388e",
    "RAL 7031 матовый": "19d4a366-e5f3-45e9-987f-ddffff86cb58",
    "RAL 7032 матовый": "8be4a9fa-a782-4a99-ae13-bca2a1e2995f",
    "RAL 7033 матовый": "0cd03150-9f2f-4450-a534-d8f76d80a62e",
    "RAL 7034 матовый": "1ce5ed36-9f4b-4203-ad62-eae85e47a234",
    "RAL 7035 матовый": "3329eba0-e507-4787-ab8a-d374d23e766e",
    "RAL 7036 матовый": "b65dbbe6-0487-4d32-a50f-c3d48861244a",
    "RAL 7037 матовый": "ad0fab53-3315-4d6b-b814-df0ebcad2862",
    "RAL 7038 матовый": "b9fc0dbe-4990-4ec8-b6ce-01a273b8dd28",
    "RAL 7039 матовый": "b8b95177-bbf7-4fce-aebc-7aa272b4946a",
    "RAL 7040 матовый": "da3c016c-d5c8-42ce-b14c-40a6901cb412",
    "RAL 7042 матовый": "c9b9c711-36ea-4b68-8c97-a84f3629b7d4",
    "RAL 7043 матовый": "6f62f43f-e861-49b9-a25d-49bb5b7885de",
    "RAL 7044 матовый": "6fe4366a-b49f-4643-bbcb-a35eeea6f389",
    "RAL 7045 матовый": "06d1fda1-bd5f-4c2a-a5f9-e928c578aaea",
    "RAL 7046 матовый": "4b303ca5-1317-4ebb-8d84-274a7c346822",
    "RAL 7047 матовый": "5420bf61-2f40-4181-b172-6616c848f060",
    "RAL 7048 матовый": "ef49e798-b669-4a8e-b9f2-6105d27c2333",
    "RAL 8000 матовый": "00d4e269-9cf0-4b7d-8ad4-3f4c4865b520",
    "RAL 8001 матовый": "f999d4e4-fd9f-402a-936e-4e136aa92ecb",
    "RAL 8002 матовый": "d6a43901-35c7-426b-9c40-f9a95b37c5fb",
    "RAL 8003 матовый": "9d53cbb4-15a5-411a-a402-736ab257e113",
    "RAL 8004 матовый": "2aa9cf86-52ed-4ed1-bdbf-9cb140da4bac",
    "RAL 8007 матовый": "f993ec98-fd79-4ddc-9cfe-b0a7302407f1",
    "RAL 8008 матовый": "27477591-11d2-4149-a0fe-23e132031d19",
    "RAL 8011 матовый": "af1a3971-323d-4bfd-a761-221153a20ea6",
    "RAL 8012 матовый": "077bfe99-ad33-4e3b-863d-cf8fd9a25bb8",
    "RAL 8014 матовый": "3b16a3bf-babd-4550-8c92-68c2e3baed3f",
    "RAL 8015 матовый": "4cfce95a-2a57-41cf-8ce7-eaace5fa69e1",
    "RAL 8016 матовый": "0a04e9a5-3d06-4f86-af1b-672771c0bb54",
    "RAL 8017 матовый": "7be7733a-8259-476c-87eb-181b7cf2a283",
    "RAL 8019 матовый": "1ec740f5-8d7e-4909-b53e-a3490b4c253a",
    "RAL 8022 матовый": "f14185c2-4b67-499f-a32c-dd70dcfb0bfb",
    "RAL 8023 матовый": "4b97fcf2-d03d-4e3b-8059-ac74c50300cd",
    "RAL 8024 матовый": "74dfb6a0-6f73-46d1-b040-24d7e60d3879",
    "RAL 8025 матовый": "36d04863-c88f-4419-8000-9cdcba469114",
    "RAL 8028 матовый": "46748510-ef97-4425-a504-e1ee2622c4d8",
    "RAL 8029 матовый": "b8aa58fc-d267-42d9-bdde-858c0193fe98",
    "RAL 9001 матовый": "708d3bb7-65db-4aaf-8e2a-0c1b1e29e5ec",
    "RAL 9002 матовый": "5c813aa0-7724-4a6b-8096-197d716f4bfd",
    "RAL 9003 матовый": "8b31aa27-4039-414e-bc51-11024c2c292f",
    "RAL 9004 матовый": "ac31722d-436f-4b3d-a8a5-a4f21fcf5eed",
    "RAL 9005 матовый": "bd5b9a6d-c77c-4ec7-af34-3e6f1233690f",
    "RAL 9006 матовый": "36dd2e55-6096-4bce-b1ac-78640ab269ae",
    "RAL 9007 матовый": "d8b51c92-4fcd-47fb-b145-4e663b3b3c87",
    "RAL 9010 матовый": "03881cb1-867e-4818-9b4e-83a7aab53fa9",
    "RAL 9011 матовый": "bb134467-c25c-4227-b2ac-54711cc1427e",
    "RAL 9016 матовый": "0b74f4dd-358e-48ed-85e7-1440529b8e7a",
    "RAL 9017 матовый": "97c17ba4-07ca-41de-9a0d-c53be05bccfc",
    "RAL 9018 матовый": "18d0758c-fd70-4741-8772-6b0ab9182b42",
    "RAL 9022 матовый": "605c158d-e1bf-40a3-9c65-c44185db5af7",
    "RAL 9023 матовый": "2fd0f3c9-0b8b-4586-b4d4-d253e378c0a5",
    "МДФ": "c22c0e55-119c-436e-9aad-d23f3a36d07d",
    "Зелёный изумрудный U655 ST9": "aa17e6ae-5306-4c80-a1f1-40aecb4493f6",
    "Зелёный лес U606 ST9": "5fc6f85e-6008-4e56-884a-9c86ab23873c",
    "Синяя глубина U560 ST9": "e2f43b0b-867f-49a0-b3da-c49ed92ba846",
    "Cеро-коричневый тёмный U740 ST9": "4839250f-4f55-4045-8d47-ffb685c1b9ff",
    "U961 PT Чёрный графит": "455a39a2-bd7b-4f20-93ac-bc97bfae0678",
    "Кукурузный жёлтый U146 ST9": "0d5aace2-5e0b-4656-a40a-8a682359a906",
    "Зелёные джунгли U660 ST9": "bbc4a4fd-8bfe-499e-a7c5-2e6ec89b897f",
    "Бархат жёлтый U107 ST9": "1d8f12b2-3b47-4ea3-b4a8-4244379a33a7",
    "Медь матированная F784 ST2": "65d68ce8-c882-4728-a045-0327fba5c100",
    "Лён терра F424 ST10": "aa61ba83-084f-4ee4-a76f-3edb35de1285",
    "Деним голубой U540 ST9": "1ab3ba7d-a17c-4740-a9b4-41cdfff26a36",
    "Текстиль серый F417 ST10": "856e5bb6-090b-46c3-8cae-0765aa0fcf71",
    "Металлик сталь F500 ST20": "83810c20-394d-4fff-b4a2-f6f92f0828e1",
    "Ниагара зелёный U646 ST9": "20115fd4-4d69-4268-8f23-d9741cfc9f2c",
    "Помадный красный U328 ST9": "dad7529f-072a-4e80-8e94-a11e22d49548",
    "Нуга коричневый U807 ST9": "63ee6f73-1fed-4312-96c4-bb972b2315fd",
    "Индиго синий U599 ST9": "4a31730d-174a-4d48-b5bf-35533255a7c0",
    "Папортник зелёный U650 ST9": "895aa9be-d4d5-476a-a7e4-d8622e8165a0",
    "Фиолетовый нежный U400 ST9": "6409fc16-f6ef-433c-83e0-657424466947",
    "Сиена оранж U350 ST9": "7a24c265-b665-4b49-9903-5c31891166d1",
    "Камень Сонора белый F041 ST15": "4376d2a7-9373-47f0-91bf-076684bb54ad",
    "Баклажан фиолетовый U330 ST9": "52ae17fb-5131-4ca1-91bd-ffd9272ff8ac",
    "Крокус фиолетовый U404 ST9": "5b003a0b-8a51-41e1-9bd3-dc4fd6721e2c",
    "Ангора серая U705 ST9": "3ced300d-c078-4e5e-930c-af2bd856faa9",
    "Красный гранат U399 ST9": "35522655-ac03-4f7e-9301-48209b25d6a9",
    "Шафрановый жёлтый U140 ST9": "7857baf5-c523-474f-b3c5-d0da76376f02",
    "Лиловый U420 ST9": "16debff6-0fd1-4b77-916a-1f587cbc4316",
    "Полярный голубой U533 ST9": "22c19d19-346d-4474-afcc-2658961716c9",
    "Светло-серый сплошной U7081 ST76": "1290a5dc-fefd-4ba7-a231-426722d397ff",
    "Зелёный васаби U617 ST9": "15f736d2-c8ab-49b3-bb4e-6c45d5e0133f",
    "Белая роза U313 ST9": "d026f680-ef85-41fd-abf6-abaa955d91c4",
    "Бирюза зелёная U633 ST9": "e2bd6903-6659-439d-8a5b-1d4a230569c1",
    "Зелёный фисташковый U608 ST9": "64a8d587-4ae5-48be-9b4a-d1d231cecbd4",
    "Дакар серый U717 ST9": "296ff10d-0a06-430c-9058-3cb6af947fe4",
    "Белый кремовый W911 SM": "b51ba03a-6320-4a87-954e-4c67256e42d3",
    "Аква голубой U500 ST9": "c1660e3e-5702-404e-b68e-b7ca52d6c826",
    "Цемент F385 ST10": "98d5a3d0-f426-4cdb-b80f-5f95b4e81775",
    "Металлик индиго синий F462 ST20": "a9196d81-ac5f-430d-8a0f-679d89d4c85d",
    "Чёрно-коричневый U989 ST9": "a7348eb1-7be1-4ed2-8600-8e9ae53b68da",
    "Дымчато-голубой U507 ST9": "98eb8c2e-0ebe-4b18-9607-f4a23cb98059",
    "Карри жёлтый U163 ST9": "b316afb0-f6c8-4e7d-99d4-980fb2551e73",
    "Щербет оранж U340 ST9": "7584ce72-a32a-4a23-beb6-ae6e5336a05e",
    "Металлик платиновый серый F463 ST2": "38fcbac5-20e5-459e-9a55-a3a8e84c6d47",
    "Фарфор белый W1200 ST9": "eb80d4a4-95f9-401c-a20c-2d91008d6014",
    "Синяя ночь U570 ST9": "144dcda5-4306-4f04-97ca-1110ce4bcff3",
    "Фиолетовый U430 ST9": "510abda9-728c-435b-ba80-bd2760061d87",
    "Индийский красный U390 ST9": "c84b39df-aea7-48fc-9d91-52e12727c193",
    "Фиолетовый темный U414 ST9": "a3f960bd-0b5d-4d42-b581-89186f3d4c01",
    "Алюминий мелкоматированный F502 ST2": "46df5e3c-3150-4eda-8d30-50347723e813",
    "Белый Альпийский сплошной W1101 ST9": "470194e3-ccec-4b79-8696-165c4d894ae2",
    "Французский голубой U515 ST9": "494fb714-1130-43e6-bfb2-e50f93fdf9e7",
    "Мрамор Латина F104 ST2": "62e11209-3e7b-4fdf-8acf-5648606ee3e2",
    "Белый полярный W1300 ST9": "41f3628d-8416-4349-82c1-586fe98952cf",
    "Вяз Тоссини серо-бежевый H1210 ST33": "4898a5fb-6c55-40b2-86e6-d892862894e7",
    "Ферро бронза F302 ST87": "3d39c53d-2518-4fb8-88ef-891477c252b3",
    "Дуб Хэлфорд чёрный H2031 ST10": "63b55cc8-203d-4eb3-94ee-5a1d7140cae6",
    "Камень Металл антрацит F121 ST87": "21951ece-f3b6-4a12-97c9-a75cec9eb03d",
    "Дуб Орлеанский песочно-бежевый H1377 ST22": "dce62d45-a8e8-4862-8aef-7b4d030a4684",
    "Древесина орнаментальная H192 ST10": "42f52295-219f-42d3-9b68-d45422f1e43b",
    "Патина золотистая F411 ST20": "aa24e9c6-4c13-4175-907a-9ea84599b77a",
    "Камень Металл светло-серый F120 PM": "c2ad63f2-4380-4989-b8b1-db0c6f21e942",
    "Стилкат титан серый F313 ST10": "3baf5496-dc3a-4f59-bfdc-b31cbf15ed58",
    "Дуб Хантон светлый H2032 ST10": "65167d78-56ac-4a6d-aa70-7005e2b04540",
    "Бетон светлый F274 ST9": "e1363b28-66a5-41d3-b8e7-181e9b2778c9",
    "Гранит Магма красный F012 ST9": "b881a607-062a-4369-838e-9b8d1df76621",
    "Вяз Тоссини белый H1701 ST33": "1b7e6d0d-b54a-4a04-a1f7-84263b50636f",
    "Спаркл Грэйн рустикальный F484 ST87": "ad7c6f16-0d10-49dd-a9d7-652bd97d8f3a",
    "Вяз Тоссини тёмно-коричневый H1702 ST33": "c4d271cf-9ee7-4b8e-a072-33e4a89d61df",
    "Бетон орнаментальный серый F333 ST76": "d2635398-da88-4885-a2e1-1550332b2514",
    "Гранит Галиция серо-бежевый F371 ST89": "34f8c9e9-8fb3-4282-b826-e9b348dbf7cb",
    "Кубанит брашированный F434 ST20": "2ac0249c-73da-4856-b389-3048ae5f2c71",
    "Орех наборный H194 ST12": "edb93e29-6903-4cdd-a73a-a9de786a0268",
    "Керамика Тессина крем F221 ST87": "9a498096-157f-4d2a-b162-ab741cc03a8d",
    "Сланец Юрский антрацит F242 ST10": "51bebe2f-d339-4b91-90cd-b23a82a3f6da",
    "Карьерный камень сланец серый F008 ST10": "20f0e4de-2d79-45e9-b0c9-b34676b6284d",
    "Древесина винтаж натуральная H197 ST10": "a37cf150-639e-4351-a666-a47f3df96edf",
    "Сталь тёмная F627 PM": "d6226a25-89a8-4de8-ad69-74459f25ffa3",
    "Гранит Магма серый F011 ST9": "0f75c862-1c20-4143-a8f6-07ffb1410f02",
    "Мрамор Сиена серый F095 ST87": "1548bc2b-fb5e-40b5-a617-4f40dea21d87",
    "Гранит Верчелли антрацит F028 ST89": "ddd88288-3021-416c-a442-4d630a09790a",
    "Дуб Аризона серый H1150 ST10": "36c072dd-1c94-41d8-afe3-82905ccadc9e",
    "Травертин Тиволи бежевый F292 ST9": "6770db2c-5aa2-433e-a6f2-5ababe247156",
    "Древесина Аттик H1400 ST22": "37e372b6-ba76-4b06-b4d3-8efbaa6ca5b7",
    "Дуб Орлеанский коричневый H1379 ST22": "f72d847a-ac72-4fc2-afb7-f08461d5db97",
    "Терраццо Триест серый F021 ST75": "f63c6170-b993-4def-a6fc-db835e614dbe",
    "Мрамор Энгельсберг F014 ST9": "d5b47a9a-8c8d-4d72-b6c6-ab6a7ea65a48",
    "Хромикс серебро F638 ST10": "1f1bd6e9-700f-4542-adc1-4f54ac46302d",
    "Карпет винтаж чёрный F508 ST10": "15725e6d-970d-473e-a8f4-2a5855488780",
    "Дуб Кендал промасленный H3171 ST9": "6f6f2ca6-3296-4493-adc8-d45389a0db2a",
    "Карьерный камень терра коричневый F007 ST10": "909de74c-13fb-4853-9f21-e8fe7def25b3",
    "Сланец Металл серебристо-серый F628 ST9": "eb9ea97a-7e5f-4943-b55e-d14f96ea4b75",
    "Мрамор Чиполлино чёрная медь F094 ST15": "50354e08-009b-4d08-b8a5-ea30c6ac6107",
    "Сланец Металл золотисто-чёрный F629 ST16": "2d9e4f0f-a69f-45e1-8400-5a02a2380b2d",
    "Мрамор Чиполлино серый F093 ST15": "f3107928-fef5-4e7e-bcfe-61839ce89c15",
    "Камень Пьетра Гриджиа антрацит F205 ST9": "57642188-73d1-4e31-996b-74f63011baf6",
    "Венге Мали H3058 ST22": "3a06580b-c646-48ac-977a-6613b2625fca",
    "Вяз Тоссини коричневый H1212 ST33": "34f69b5f-5f61-400d-a41d-bc3d4fab1b9d",
    "Дуб Гладстоун сепия H3342 ST28": "d8d6b496-c54b-4f62-bb2c-9a81a1929683",
    "Дуб Сорано натуральный светлый H1334 ST9": "28501c8f-4362-4bb9-9c7d-6af2494a39cd",
    "Дуб Касл H195 ST10": "7da4f7e4-c04d-4dc7-8391-54cb8fc590b9",
    "Лиственница горная антрацит H3406 ST38": "b18e8577-b830-4d87-86bb-90d945dd444f",
    "Ясень Лион песочно-бежевый H1298 ST22": "2367c129-b052-4826-a1ff-4cab20019a03",
    "Металлическая плита винтаж F010 ST9": "c17bd724-5021-4b3a-b511-2df1186582bc",
    "Сосна Силэнд H110 ST9": "12f77f14-9ef8-4ac4-9c40-d9ca3f554c84",
    "Дуб Ланкастер натуральный H3368 ST9": "0f6f6e1d-c42d-4250-a0e6-76a5ab7d74f7",
    "Бетон Чефалу светлый F823 ST10": "26b95f0e-437c-4984-80ec-d77fbee4746c",
    "Фабрик Металл антрацит F461 ST10": "77a15eca-cd50-4a4f-9f67-9360b194fc6d",
    "Деревянные блоки натуральные H050 ST9": "5cc731ac-a8e9-4480-9922-9f28145acdfa",
    "Пихта сучковатая натуральная H3470 ST22": "9b014564-e303-481a-9a24-c4869244fd98",
    "Дуб Небраска серый H3332 ST10": "36b63930-7bc1-473d-9c7e-2c56a516bd20",
    "Дуб Винченца серый H3158 ST19": "486f8f4f-f061-4b85-8fb4-bf1481fb9878",
    "Мрамор Флоренция серый F112 ST9": "9a796386-288d-440b-a563-dce2704368ad",
    "Дуб Галифакс глазурованный песочно-серый H1336 ST37": "8985f90d-0992-4431-b728-4c2249689291",
    "Дуб Кайзерсберг H3349 ST19": "e412968b-5c36-423d-a051-511621af55fd",
    "Лиственница горная коричневая H3404 ST38": "803072b0-257a-4966-8065-275dca34d713",
    "Керамика Тессина терра F222 ST76": "688e2627-28c5-437d-863f-11b3d04c3fb1",
    "Лиственница горная белая H3403 ST38": "dc302c66-5b45-4ace-a434-3bfa015e4a48",
    "Лиственница горная 4k": "90ffe8ea-36ff-453e-8087-6614ca1302d9",
    "«Кашемир» матовый - ЛДСП": "38ba79df-1601-458b-a230-1ff025aab453",
    "Краска матовая пепельно-голубая": "0c3f9923-c409-4db2-b766-903b90dacb8d",
    "ЛДСП - «Аризона» мягкое дерево": "e7cbb9c1-679f-49be-99d5-89546f2efe5a",
    "ЛДСП - «Дымчатый Зеленый» шагрень": "89b4c503-98f5-477f-891e-f38894041726",
    "ЛДСП - «Дымчатый Серый» шагрень": "4f23e5b5-451c-4bba-954c-69bd3e5669a0",
    "ЛДСП - «Пасифай» шагрень": "2bea15d9-0f1a-4299-86e4-d8ef13a8e1de",
    "ЛДСП - «Пыльный Розовый» шагрень": "b33aa7b2-bc3f-46c7-ac62-16cd31cec1cb",
    "ЛДСП - «Юстус» мягкое дерево": "4f658bf0-d0db-4fa8-8342-e38048a00fe7",
    "«Серый Камень» матовое - ЛДСП": "2dbe43ea-34da-420b-83aa-dbc9d6e05bdb",
    "«Зейдан» мягкое дерево - ЛДСП": "8032dd31-66fc-46e2-9df5-71f4a0efd2a0",
    "«Дуб Гарден Светлый» мягкое дерево - ЛДСП": "8726b66c-4008-42f5-8095-4553fcd93cf5",
    "«Дуб Гарден Темный» мягкое дерево - ЛДСП": "4d4bd825-3dc5-44b3-8459-2ab3af70abb6",
    "«Файерстоун» шагрень - ЛДСП": "58c6110c-a79c-482c-a64d-91b2c4a9a0e4",
    "«Дуб Маувелла» мягкое дерево - ЛДСП": "05862bf1-d1a7-4bdb-9e55-b824fd13f0e0",
    "«Финдус Бежевый» лофт - ЛДСП": "76d05470-4513-4c77-8113-91fd00c1dc26",
    "«Дуб Самдал» вудлайн - ЛДСП": "909e8d9d-7ad5-45b5-b955-b5889302a3ea",
    "«Дуб Апрельский Нордик» вудлайн - ЛДСП": "a1ddf03e-43fe-4889-bdb0-d421348f9dbd",
    "«Дуб Апрельский Нордик» мягкое дерево - ЛДСП": "61818996-e51b-4187-bed7-c800f4a0eca8",
    "«Тела Серая» шагрень - ЛДСП": "6e2edb88-606c-47f5-af17-622ea02896ee",
    "ЛДСП - «Белый» вудлайн": "0c4e019e-48e6-45c4-89d1-7a5c1ffdeadd",
    "ЛДСП - «Белый» кантри": "399f53d7-74fc-4a61-8e55-25a81e8fb26d",
    "ЛДСП - «Белый» мягкое дерево": "262db51e-ddbb-4e43-aced-3518c07fa1bf",
    "ЛДСП - «Белый» древесные поры": "0081d7b5-09d8-4238-9cb1-7351003e5ed0",
    "ЛДСП - «Белый» матовое": "3817cf0b-b4a4-466d-ab5c-14335ffb6549",
    "ЛДСП - «Баунти» вудлайн": "e3c82c95-9935-463c-869a-adf7db552999",
    "ЛДСП - «Беж Камео» шагрень": "169166e1-1f7a-475b-8aab-4d64a5cc10cf",
    "ЛДСП - «Бежевый» шагрень": "012349ac-58e5-4494-8d1e-0ed26a90efa0",
    "ЛДСП - «Бетон Пайн Светлый» Лофт": "e36c5eba-9583-4158-90d0-e19b0f47daf7",
    "ЛДСП - «Бетон Пайн Светлый» Мягкое дерево": "a8aa3b1a-edcb-4706-96a0-3720abc633c5",
    "ЛДСП - «Бетон Пайн» вудлайн": "eba62566-e6d1-4e61-89a3-df7bf6e873c1",
    "ЛДСП - «Бетон Пайн» лофт": "e1196c6f-073f-4259-80af-a065b22f519c",
    "ЛДСП - «Бодега Белый» вудлайн": "6ab01e31-6389-4f5e-8555-842e6020e79e",
    "ЛДСП - «Бунратти» вудлайн": "cd02b176-4ffb-477c-a946-3816f5d659d1",
    "ЛДСП - «Бунратти» мягкое дерево": "7bea8fd5-6b50-4ebb-b6ef-ff66247ed75a",
    "ЛДСП - «Венге Цаво» древесные поры": "b7949840-be7c-43a5-b979-3e6382055226",
    "ЛДСП - «Баунти» мягкое дерево": "ae02a0c6-3bb5-4157-a015-e6789687bf7d",
    "ЛДСП - «Винтерберг» вудлайн": "51145471-5252-4fd5-896f-08eca9136a6a",
    "ЛДСП - «Вяз Швейцарский» вудлайн": "5ec38674-eb36-4f73-a43d-258f736b73a7",
    "ЛДСП - «Вяз Швейцарский» мягкое дерево": "edbf3ce5-8b91-4692-8bbf-2f6879eba5e3",
    "ЛДСП - «Граффити» лофт": "88f0e4e8-17c9-42a1-b95b-585badd8da81",
    "ЛДСП - «Джара Госфорд» вудлайн": "fbadb75d-5f81-461b-bc5e-ff94df96bffd",
    "ЛДСП - «Джара Госфорд» древесные поры": "8fc02f4b-5331-4499-a8ed-a1739d436b0d",
    "ЛДСП - «Джара Госфорд» мягкое дерево": "97473ca2-b038-446f-ac76-7eba0e111b68",
    "ЛДСП - «Дуб Апрельский Шоколадный» вудлайн": "a6adafea-560e-4e22-99be-1c7a1361a1bd",
    "ЛДСП - «Дуб Апрельский Шоколадный» мягкое дерево": "77580f40-7a77-420b-abc5-a70ed1749f18",
    "ЛДСП - «Дуб Кантербери» вудлайн": "61848ef7-a6f5-4c1f-b8b1-0d9619d7a492",
    "ЛДСП - «Дуб Кантербери» древесные поры": "e961591d-9cce-42e2-a80f-cceaf88329e8",
    "ЛДСП - «Дуб Катания» вудлайн": "ef9b7868-ba85-409d-8ccb-200782935371",
    "ЛДСП - «Дуб Катания» мягкое дерево": "ea05dfb3-cfca-49e8-8947-89a717919caf",
    "ЛДСП - «Дуб Сантана Светлый» древесные поры": "c7550b32-6ab1-4b03-ac98-c692da552594",
    "ЛДСП - «Дуб Сантана Светлый» мягкое дерево": "0cb10de4-ce6c-485e-83ac-353a504dba7a",
    "ЛДСП - «Дуб Сонома 001» вудлайн": "a2be154d-cd5a-4f98-925d-4dfb87985f9d",
    "ЛДСП - «Дуб Сонома 001» мягкое дерево": "3b8f7baa-2f52-4593-ac7c-888d15a13a53",
    "ЛДСП - «Дуб Сонома 003»  вудлайн": "630f8087-ad0a-49b2-a6f0-cf9a96f03638",
    "ЛДСП - «Дуб Сонома 003» древесные поры": "a7d12df9-f40a-4c16-9899-6ac6f117d9e0",
    "ЛДСП - «Дуб Тоскана Дымчатый» вудлайн": "5d0a7080-322a-4d43-a32f-ec3fd1541282",
    "ЛДСП - «Дуб Тоскана Дымчатый» мягкое дерево": "bc5cb9c3-f8d9-488d-90be-365ca506f3f8",
    "ЛДСП - «Дуб Харбор Белый» вудлайн": "6de169a0-162a-4bc4-bcef-84b048c28760",
    "ЛДСП - «Дуб Харбор Белый» мягкое дерево": "4aa089d3-b821-4ab2-800f-3b2e8ba66b1a",
    "ЛДСП - «Дуб Честерфилд 003» вудлайн": "666b8429-c995-437c-b7f5-a770f84fa6f6",
    "«Дуб Честерфилд 005» вудлайн - ЛДСП": "6f26c991-c21e-4a6d-86bc-2bbebafe823a",
    "«Карамель»  древесные поры - ЛДСП": "f4a7b13d-9a8a-419a-a399-4fe6ca95d390",
    "ЛДСП - «Карамель» вудлайн": "61e04aa0-67a0-45d7-b8ef-4624e0b4a5fa",
    "ЛДСП - «Кронберг»  мягкое дерево": "c48ca3ec-2a4c-4c33-a877-7da61ad3045c",
    "ЛДСП - «Кронберг» вудлайн": "5ea47bf2-e842-4ad3-b2b2-19c61fa6471f",
    "ЛДСП - «Лайм» шагрень": "ad525d7c-c55d-40e8-ad93-4fc4c61e182e",
    "ЛДСП - «Матера Шайн» шагрень": "437cf67b-4465-46ee-91f1-f59890b5221e",
    "ЛДСП - «Метрополитан» вудлайн": "631fb3fb-2870-4567-abdf-e21ed0d1bdd9",
    "ЛДСП - «Оникс» шагрень": "e53c9230-880e-445c-aff0-732249eaada9",
    "ЛДСП - «Оникс» лофт": "16e12519-7c5f-4071-8518-bbe4fe3c709d",
    "ЛДСП - «Пикард» вудлайн": "80ac3e88-d996-4fc0-8f10-a2776c9f8728",
    "ЛДСП - «Пикард» древесные поры": "921be8ce-edb4-4f44-9acc-2a104c0a7d25",
    "ЛДСП - «Пикард» мягкое дерево": "2e7dd3ff-f3e8-46fd-96ed-fa601bae773a",
    "ЛДСП - «Пихта Серебристая» мягкое дерево": "acef6500-6300-4a58-a08b-1df6f5440bcb",
    "ЛДСП - «Розовый» шагрень": "467edcad-5bdb-468b-976a-4464e3e90a6a",
    "ЛДСП - «Сосна Гасконь» мягкое дерево": "1a9b103f-82a0-4082-8a8c-a05deae2977b",
    "ЛДСП - «Сосна Карелия» вудлайн": "131fa756-e6f2-44cd-ba05-05a4c2fd86bc",
    "ЛДСП - «Сосна Скандинавия» вудлайн": "a3ed8508-d93b-4844-9244-77c469e41ef7",
    "«Сосна Скандинавия» мягкое дерево ЛДСП": "2f909653-907c-4116-98a7-77d32fd99841",
    "ЛДСП - «Супер Белый» матовое": "ccf32d2f-c428-4166-9b05-adbf5c3c2554",
    "ЛДСП - «Таксония Медовая» вудлайн": "b7b567a2-4742-4ed9-8537-36bfbf54541a",
    "ЛДСП - «Таксония Шоколадная» вудлайн": "495de0cc-94c7-4d9b-8e86-7e8085d44b08",
    "«Трансильвания» вудлайн - ЛДСП": "c79e9187-a9f2-4806-9386-126535a9176d",
    "ЛДСП - «Трансильвания» мягкое дерево": "1d5a50db-d931-4002-874f-2740635134ff",
    "ЛДСП - «Ясмунд» мягкое дерево": "f05b396c-31a0-4a70-b8b6-eae97ff296a9",
    "ЛДСП - «Ясмунд» вудлайн": "9711ac20-9a41-4c6a-bf01-300c43f2587d",
    "ЛДСП - «Ясень Шимо Темный» мягкое дерево": "feac885c-2b51-4611-b29c-3c120eca6c5e",
    "ЛДСП - «Ясень Шимо Темный» вудлайн": "8009fa72-3b6b-4206-a24f-fe1f4ae1b401",
    "«Ясень Шимо Светлый» мягкое дерево ЛДСП": "691f9201-ae8b-4c17-be7e-cc0eda4b74b8",
    "ЛДСП - «Ясень Шимо Светлый» вудлайн": "63d7221e-cbb9-4dab-b2fa-201b459ca657",
    "ЛДСП - «Ясень Ориноко» вудлайн": "3e2a30ac-0cb3-4db8-b4ac-3bdf076945e7",
    "ЛДСП - «Ясень Анкор Темный» вудлайн": "ee19ccd1-e67e-438d-a748-5d56bcbf700d",
    "ЛДСП - «Ясень Анкор Светлый» вудлайн": "3e759c84-feb4-445d-b9e3-f12e9a3ec4e7",
    "ЛДСП - «Ясень Анкор Белый» вудлайн": "84593cdc-e622-4e15-922f-f2475c73bf3e",
    "ЛДСП - «Цемент Темный» лофт": "7af51a4d-b7c2-43b4-9598-1980d12c1bd7",
    "ЛДСП - «Цемент Светлый»  лофт": "2a682ca6-0b98-4324-9bf1-a80a2e0f2b44",
    "ЛДСП - «Таксония Медовая» мягкое дерево": "daa2c9fb-5451-436c-a4b6-aa69e38608ca",
    "Дуб - «Лак»": "a55da9a0-f201-40b7-b57b-8959381adaf6",
    "Дуб - 007 «Черный»": "a415868c-6ea5-447a-a999-fe3af4387f58",
    "Дуб - 206 «Дуб Коньячный»": "8f73db93-56c3-40f8-8ea5-2f0c24cbaacb",
    "Дуб - 217 «Дуб Темный»": "d694d455-a880-4b58-8fbd-fc89f2b03566",
    "Дуб - 219 «Дуб натуральный»": "e94a3c1f-c96e-4ffe-9003-9f4cb0e040aa",
    "Дуб - 242 «Вишня Дикая»": "b0f95a74-2b6e-4867-ac49-408764b1762f",
    "Дуб - 243 «Вишня Красная»": "2a17acca-520c-4e13-989b-c7b74f09fd14",
    "Дуб - 254 «Ясень Светлый»": "722a2725-3005-4f77-ba8a-a738f893eeee",
    "Дуб - 272 «Сосна золотистая»": "6b85e39d-6c6f-47d9-829f-7ab05e1f77df",
    "Дуб - 281 «Палисандр»": "715843cb-abde-4d68-8281-10faad521c46",
    "Дуб - 291 «Орех»": "655a812b-b306-4f45-835e-2a50c634a601",
    "Дуб - 301 «Венге»": "38193fc0-5a6e-4890-ba5c-254f33c1c27f",
    "Дуб - 327 «Сантал Темный»": "2976cfa1-945c-4613-b67d-7667a9448319",
    "Дуб - 331 «Кемпас»": "4d566183-88f7-43a2-bade-874265596873",
    "Дуб - 346 «Махагон»": "5b056a54-cdaf-4ee2-8004-d49cd15a58db",
    "Сосна - 007 «Черный»": "6ac4c710-079c-4bb8-b6ff-9fbf590da2ef",
    "Сосна - 217 «Дуб Темный»": "7e04ee3c-a3d4-4985-82b6-b44e64b5d201",
    "Сосна - 219 «Дуб натуральный»": "62ee02ac-7ecc-42c6-a862-069332a2a850",
    "Сосна - 233 «Бук светлый»": "4eb071e5-1c84-43a0-9abd-854a4ae06100",
    "Сосна - 243 «Вишня Красная»": "87ef2ac3-258e-4367-a513-1a51d435ad20",
    "Сосна - 272 «Сосна золотистая»": "f8d94579-0a6a-456b-840d-4ea4b096bb04",
    "Сосна - 291 «Орех»": "3fa56112-7ed5-428b-a46f-c86f06238483",
    "Сосна - 301 «Венге»": "f0f33d48-237f-466c-9fda-2c8e9ce1861c",
    "Сосна - 336 «Мербау»": "07ca1b42-fe0f-4f92-964c-ebc4d744cf89",
    "Сосна - 346 «Махагон»": "6c2d99b6-052a-44fa-8acd-3af7a433d163",
    "Сосна - 254 «Ясень Светлый»": "7be4e7c0-ad4c-4377-9a51-8777f91d2665",
    "Клен": "c6dfc510-310b-4de2-8bd1-51801620c7ed",
    "Бук натуральный некрашеный матовый": "0bda9591-d852-4eeb-929e-9378921a0843",
    "Бук натуральный лакированный глянец": "94639016-4906-4f38-acd8-e6b755fafcb9",
    "Клён темный": "b9890c70-68fb-40c4-9640-7fa9e13d329c",
    "Вишня темная": "dc3e31ee-a5be-4910-a0dc-fe3939b0419d",
    "Палисандр": "de608260-3e3e-4699-a0d1-eb6d2de596fa",
    "Бук натуральный белый непрозрачная": "3c9210ba-1d4a-49fd-bbb7-4a0ea59c580d",
    "Бук европейский": "a24fc7c3-9261-4f95-a760-10bd4c77caca",
    "Венге черный": "c8c99af6-68f2-4844-8f81-8e7e741434c8",
    "Кремпас": "88a0154b-2686-4f3a-b36a-799d2ae26603",
    "Дуб Неаполь": "7bb5708c-3c0c-4983-bb4d-b4590d435d69",
    "Black Star": "8f065e42-9628-4cc1-b7b3-32aa119a424c",
    "ZB 108-2 Белое Дерево": "e4afdf9d-b820-4342-ac9d-86f0c1004cee",
    "Софт Айс": "02e6d196-27a0-4600-b539-2825ab93d807",
    "Дуб светлый": "ac32cc21-f3b9-4af6-b21b-e479e233f7ec",
    "Вишня Оксфорд": "295503fc-8198-4dff-8c5e-dfd45b4ecb22",
    "Дерево белое": "f0c63676-357f-4e86-8b6f-1a6188e9b0e0",
    "Клен красный": "53e3ab18-2cc3-4469-a6ef-1227d973c790",
    "Клён рельефный": "bfdccd79-b7a3-4f8d-afcf-d131302b35a0",
    "Светлый венге": "050c827b-5cec-4a70-ac39-3679d3d28387",
    "Бетон крем": "eeeb45df-cc0f-490a-beb4-4e44524a7c73",
    "Тиковое дерево": "404b6fd9-f0f0-4d68-bb8a-28c69bbd2df5",
    "Тест материалов АрТех": "e97bba1f-3318-4fa4-96ee-afc9b94bde76"
}

function findMaterial(baseName, materials) {
    const normalize = (str) => {
        return str.toLowerCase()
                  .replace(/[^a-zа-яё0-9\s]/g, '') // Удаляет все, кроме букв, цифр и пробелов
                  .replace(/\s+/g, ' ')            // Заменяет множественные пробелы на один
                  .trim();                         // Убирает пробелы в начале и конце
    };
    
    const normalizedBaseName = normalize(baseName);

    if (normalizedBaseName.includes('стекло')) {
        return "53d543a0-3af0-484a-9232-6a439fb808a9";
    }

    const words = normalizedBaseName.split(' ');
    
    console.log("Искомые слова:", words);
    let bestMatch = "2381385d-91bb-47fa-8925-df8d0f2dd0bd";
    let maxMatchedWords = 1;
  
    Object.entries(materials).forEach(([name, guid]) => {
      const normalizedName = normalize(name);
      let matchedWords = words.filter(word => normalizedName.includes(word)).length;
  
      if (matchedWords > maxMatchedWords) {
        maxMatchedWords = matchedWords;
        bestMatch = guid;
        console.log("guid guid:", guid);
      }
    });
  
    return bestMatch
}


let materials = new Map();
let details2 = new Map();

// Функция для обработки объекта
function getMaterialGuid(materialName, component) {
    let materialGUID;
    
    if (!materials.has(materialName)) {
        // Если материал не найден, ищем подходящий и добавляем в Map
        materialGUID = findMaterial(materialName, sys_mats);
        materials.set(materialName, materialGUID);
        details2.set(materialName, [component.path + '/' + component.name]);
    } else {
        // Если материал уже есть, получаем его GUID и добавляем деталь в список
        materialGUID = materials.get(materialName);
        details2.get(materialName).push(component.path + '/' + component.name);
    }

    return materialGUID;
}

let visibleModelsKeywords = [
    "ручка", "труба", "петля", "держатель", "направляющая", "ножка", "заглушка", "гайка", "полкодержател", "менсолодержател", "уголок", "планка", "рейка"
];
let hiddenModelsKeywords = [
    "винт", "шкант", "шуруп", "шайба", "саморез", "втулка", "прокладка", "дюбель", "шпилька", "конфирмат", "эксцентрик", "стяжк", "футорк"
];

let components = [];

let colors = [];
let details = [];

let inputs = [];
let nodes = [];

let totalProcessed = 0;
const pauseInterval = 10;

// Furniture?
let visibleModels = []
let hiddenModels = []

let profilesCache = {};

// Функция для получения профиля из кэша или загрузки нового
function getProfile(panelThickness, buttThickness) {
    let panelThickRounded = Math.round(panelThickness);

    let buttThickRounded = 0
    if (buttThickness > 1) {
        buttThickRounded = Math.round(buttThickness);
    } else {
        buttThickRounded = Math.round(buttThickness * 10) / 10; // округление до 0.1 если меньше 1
    }
    
    let profileName = `${panelThickRounded}_${buttThickRounded.toString().replace('.', '')}`;
    
    if (profilesCache[profileName]) {
        return profilesCache[profileName];
    }
    
    let filePath = `butts/${profileName}.frw`;
    if (!system.fileExists(filePath)) {
        filePath = "butts/16_2.frw";
    }
    
    let newProfile = NewContour();
    newProfile.Load(filePath);
    
    profilesCache[profileName] = newProfile;
    return newProfile;
}

function applyButts(panel) {
    if (!panel.Butts) {
        return null;
    }

    // Сохраняем информацию о кромках
    let buttsInfo = [];
    for (let i = 0; i < panel.Butts.Count; i++) {
        let bu = panel.Butts[i];
        buttsInfo.push({
            "ElemIndex": bu.ElemIndex,
            "ClipPanel": bu.ClipPanel,
            "Material": bu.Material,
            "Sign": bu.Sign,
            "Thickness": bu.Thickness
        });
    }
    
    // Очищаем существующие кромки
    panel.Butts.Clear();
    panel.Build();
    
    // Применяем новые кромки с профилями
    for (let i = 0; i < buttsInfo.length; i++) {
        let buttInfo = buttsInfo[i];
        
        var butt = panel.Butts.Add();
        butt.ElemIndex = buttInfo.ElemIndex;
        butt.ClipPanel = buttInfo.ClipPanel;
        butt.Material = buttInfo.Material;
        butt.Sign = buttInfo.Sign;
        butt.Thickness = buttInfo.Thickness;
        
        // Получаем профиль из кэша или загружаем новый
        butt.Profile = getProfile(panel.Thickness, buttInfo.Thickness);
    }
    
    panel.Build();

    return buttsInfo;
}

function normalizeVector(v) {
    let len = Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
    return [v[0]/len, v[1]/len, v[2]/len];
}

function exportPanelAndButts(panel, index) {
    // Массивы для панели
    let panelVertices = [];
    let panelFaces = [];
    let panelTotalVertices = 0;
    let panelTexCoords = [];
    let panelNormals = [];
    
    // Массивы для кромок 
    let buttVertices = [];
    let buttFaces = []; 
    let buttTotalVertices = 0;
    let buttTexCoords = [];
    let buttNormals = [];
    
    let minX = Infinity, minY = Infinity, minZ = Infinity;
    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;

    function exportObject(obj) {
        if (obj.TriListsCount) {
            for(let i = 0; i < obj.TriListsCount; i++) {
                let triPack = obj.TriLists[i];
               
                // Проверяем тип поверхности
                let isFace = (triPack.toString() == "[object TFurnPanelFace]");
                let isPanelSurface = (
                    triPack.toString() == "[object TFurnPanelSide]" 
                    || isFace
                );
        
                for(let j = 0; j < triPack.Count; j++) {
                    let tri = triPack.Triangles[j];
                    let v1 = obj.ToGlobal(tri.Vertex1);
                    let v2 = obj.ToGlobal(tri.Vertex2);
                    let v3 = obj.ToGlobal(tri.Vertex3);
        
                    const v1m = [v1.x/1000, v1.y/1000, v1.z/1000];
                    const v2m = [v2.x/1000, v2.y/1000, v2.z/1000];
                    const v3m = [v3.x/1000, v3.y/1000, v3.z/1000];
        
                    [v1m, v2m, v3m].forEach(v => {
                        minX = Math.min(minX, v[0]);
                        minY = Math.min(minY, v[1]);
                        minZ = Math.min(minZ, v[2]);
                        maxX = Math.max(maxX, v[0]);
                        maxY = Math.max(maxY, v[1]); 
                        maxZ = Math.max(maxZ, v[2]);
                    });
    
                    // Получаем текстурные координаты
                    let tx1 = tri.TexCoord1.x/1000;
                    let ty1 = tri.TexCoord1.y/1000;
                    let tx2 = tri.TexCoord2.x/1000;
                    let ty2 = tri.TexCoord2.y/1000;
                    let tx3 = tri.TexCoord3.x/1000;
                    let ty3 = tri.TexCoord3.y/1000;

                    let n1 = obj.ToGlobal(tri.Normal1);
                    let n2 = obj.ToGlobal(tri.Normal2);
                    let n3 = obj.ToGlobal(tri.Normal3);
                    let n1m = normalizeVector([n1.x, n1.y, n1.z]);
                    let n2m = normalizeVector([n2.x, n2.y, n2.z]);
                    let n3m = normalizeVector([n3.x, n3.y, n3.z]);

                    if (isPanelSurface) {
                        // panelTexCoords.push([tx1, ty1], [tx2, ty2], [tx3, ty3]);
                        // Поворачиваем на 90 градусов текстурные координаты для панелей
                        // Меняем x и y местами и инвертируем одну из координат
                        panelTexCoords.push(
                            [ty1, tx1],  // Поворот на 90 градусов
                            [ty2, tx2],
                            [ty3, tx3]
                        );
                        panelNormals.push(n1m, n2m, n3m);

                        // Сохраняем в массивы панели
                        panelVertices.push(v1m, v2m, v3m);
                        let baseIndex = panelTotalVertices + 1;
                        panelFaces.push(`f ${baseIndex}/${baseIndex}/${baseIndex} ${baseIndex+1}/${baseIndex+1}/${baseIndex+1} ${baseIndex+2}/${baseIndex+2}/${baseIndex+2}`);
                        panelTotalVertices += 3;

                    } else {
                        buttTexCoords.push([tx1, ty1], [tx2, ty2], [tx3, ty3]);
                        buttNormals.push(n1m, n2m, n3m);
                        
                        // Сохраняем в массивы кромок
                        buttVertices.push(v1m, v2m, v3m);
                        let baseIndex = buttTotalVertices + 1;
                        buttFaces.push(`f ${baseIndex}/${baseIndex}/${baseIndex} ${baseIndex+1}/${baseIndex+1}/${baseIndex+1} ${baseIndex+2}/${baseIndex+2}/${baseIndex+2}`);
                        buttTotalVertices += 3;
                    }
                }
            }
        }
        
        if (obj.List) {
            for(let i = 0; i < obj.Count; i++) {
                exportObject(obj.Objects[i]);
                system.sleep(1);
            }
        }
    }
    
    exportObject(panel);
    
    const center = {
        x: (minX + maxX) / 2,
        y: (minY + maxY) / 2,
        z: (minZ + maxZ) / 2
    };
    
    // Экспорт панели
    const panelObjVertices = panelVertices.map(v =>
       `v ${v[0] - center.x} ${v[1] - center.y} ${v[2] - center.z}`
    );
    
    // Добавляем текстурные координаты
    const panelObjTexCoords = panelTexCoords.map(t =>
       `vt ${t[0]} ${t[1]}`
    );
    const panelObjNormals = panelNormals.map(n =>
        `vn ${n[0]} ${n[1]} ${n[2]}`
    );
    
    fs.writeFileSync(`results/panel_${index}.obj`, [
       ...panelObjVertices, 
       ...panelObjTexCoords,
       ...panelObjNormals,
       ...panelFaces
    ].join('\n'));
    
    // Экспорт кромок
    if (buttVertices.length) {
        const buttObjVertices = buttVertices.map(v => 
           `v ${v[0] - center.x} ${v[1] - center.y} ${v[2] - center.z}`
        );
        
        // Добавляем текстурные координаты
        const buttObjTexCoords = buttTexCoords.map(t =>
           `vt ${t[0]} ${t[1]}`
        );
        const buttObjNormals = buttNormals.map(n =>
           `vn ${n[0]} ${n[1]} ${n[2]}`
        );
        
        fs.writeFileSync(`results/butts_${index}.obj`, [
           ...buttObjVertices,
           ...buttObjTexCoords,
           ...buttObjNormals,
           ...buttFaces
        ].join('\n'));

    } else {
        const defaultSize = 0.0001;
        let emptyVerticesArray = [
            [0, 0, 0],
            [defaultSize, 0, 0],
            [0, defaultSize, 0]
        ];
        let emptyFaces = ['f 1 2 3'];
    
        const emptyVertices = emptyVerticesArray.map(v => 
            `v ${v[0]} ${v[1]} ${v[2]}`
        );
        fs.writeFileSync(`results/butts_${index}.obj`, [...emptyVertices, ...emptyFaces].join('\n'));
    }
}


function quaternionToEuler(q) {
    const rad2deg = 180 / Math.PI;
    const {x, y, z, w} = q;
    let pitch, yaw, roll;

    // Тангаж (поворот вокруг X)
    const sinp = 2 * (w * x - y * z);
    if (Math.abs(sinp) >= 1) {
        // pitch = Math.copySign(Math.PI / 2, sinp);
        pitch = sinp >= 0 ? Math.PI / 2 : -Math.PI / 2;
    } else {
        pitch = Math.asin(sinp);
    }

    // Рыскание (поворот вокруг Y)
    const siny_cosp = 2 * (w * y + x * z);
    const cosy_cosp = 1 - 2 * (x * x + y * y);
    yaw = Math.atan2(siny_cosp, cosy_cosp);

    // Крен (поворот вокруг Z)
    const sinr_cosp = 2 * (w * z + x * y);
    const cosr_cosp = 1 - 2 * (z * z + x * x);
    roll = Math.atan2(sinr_cosp, cosr_cosp);

    pitch *= rad2deg;
    yaw *= rad2deg;
    roll *= rad2deg;

    // Нормализуем углы в диапазон [-180, 180]
    const normalizeAngle = angle => ((angle + 180) % 360) - 180;

    const result = {
        x: normalizeAngle(pitch),
        y: normalizeAngle(yaw),
        z: normalizeAngle(roll)
    };

    // console.log(result);
    return result;
}


function multiplyQuaternions(q1, q2) {
    return {
        w: q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z,
        x: q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        y: q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        z: q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w
    };
}

function newGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function createEnumYesNoInput(inputName) {
    return {
        "guid": newGuid(),
        "verbose_ru": null,
        "name": inputName,
        "type": 5,
        "value": "Да",
        "settings": {
            "values": [
                {
                  "value": "Да",
                  "verbose": null
                },
                {
                  "value": "Нет",
                  "verbose": null
                }
            ],
            "display": 0,
            "manipulator_handle_next": null,
            "manipulator_handle_previous": null,
            "tag": "anim",
            "is_interactive": true,
            "event": null,
            "show_in_preview": false,
            "show_in_consult": true,
            "display_external": false
        },
        "is_active": true,
        "is_hidden": false,
        "hint": null,
        "order": 0,
        "related": null
    }
}

function createRotateInput(inputName, angle) {
    return {
        "guid": newGuid(),
        "verbose_ru": null,
        "name": inputName,
        "type": 1,
        "value": 0,
        "settings": {
            "min": angle.min,
            "max": angle.max,
            "minText": null,
            "maxText": null,
            "manipulator_start": null,
            "manipulator_end": null,
            "manipulator_handle": null,
            "tag": "anim",
            "is_interactive": true,
            "event": null,
            "show_in_preview": false,
            "show_in_consult": true,
            "display_external": false
        },
        "is_active": true,
        "is_hidden": false,
        "hint": null,
        "order": 1,
        "related": null
    }
}

function createTranslateInput(inputName, offset) {
    return {
        "guid": newGuid(),
        "verbose_ru": null,
        "name": inputName,
        "type": 1,
        "value": 0,
        "settings": {
            "min": offset.min,
            "max": offset.max,
            "minText": null,
            "maxText": null,
            "manipulator_start": null,
            "manipulator_end": null,
            "manipulator_handle": null,
            "tag": "anim",
            "is_interactive": true,
            "event": null,
            "show_in_preview": false,
            "show_in_consult": true,
            "display_external": false
        },
        "is_active": true,
        "is_hidden": false,
        "hint": null,
        "order": 1,
        "related": null
    }
}

function createNodeGetInput(inputName, order, x = 300, y_step = 100) {
    return {
        "guid": newGuid(),
        "name": "Получить вход",
        "color": "#7dff63",
        "position": {
        "x": x,
        "y": order*y_step
        },
        "method": {
        "name": "GetInputValue",
        "arguments": [
            {
            "name": "input",
            "value": inputName,
            "type": 20
            }
        ],
        "result": {
            "name": null,
            "value": null,
            "type": 1
        }
        },
        "order": order
    }
}
        
function createNodeSetRotation(partPathName, summRotGuid, order) {
    return  {
        "guid": newGuid(),
        "name": "Задать поворот",
        "color": "#df6aff",
        "position": {
          "x": 1300,
          "y": (order*100) - 150
        },
        "method": {
          "name": "SetComponentRotation",
          "arguments": [
            {
              "name": "comp",
              "value": partPathName,
              "type": 6
            },
            {
              "name": "ax",
              "value": {
                "node_guid": summRotGuid,
                "pair_key":  "E"
              },
              "type": 2
            },
            {
              "name": "ay",
              "value": {
                "node_guid": summRotGuid,
                "pair_key":  "F"
              },
              "type": 2
            },
            {
              "name": "az",
              "value": {
                "node_guid": summRotGuid,
                "pair_key":  "G"
              },
              "type": 2
            }
          ],
          "result": {
            "name": null,
            "value": null,
            "type": 0
          }
        },
        "order": order
    }
}

function getScriptContent(axisStart, axisEnd, component) {
    return `
function quaternionMultiply(a, b) {
    return {
        w: a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z,
        x: a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y,
        y: a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x,
        z: a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w
    };
}

function quaternionToEuler(q) {
    const rad2deg = 180 / Math.PI;
    const {x, y, z, w} = q;
    let pitch, yaw, roll;

    // Тангаж (поворот вокруг X)
    const sinp = 2 * (w * x - y * z);
    if (Math.abs(sinp) >= 1) {
        // pitch = Math.copySign(Math.PI / 2, sinp);
        pitch = sinp >= 0 ? Math.PI / 2 : -Math.PI / 2;
    } else {
        pitch = Math.asin(sinp);
    }

    // Рыскание (поворот вокруг Y)
    const siny_cosp = 2 * (w * y + x * z);
    const cosy_cosp = 1 - 2 * (x * x + y * y);
    yaw = Math.atan2(siny_cosp, cosy_cosp);

    // Крен (поворот вокруг Z)
    const sinr_cosp = 2 * (w * z + x * y);
    const cosr_cosp = 1 - 2 * (z * z + x * x);
    roll = Math.atan2(sinr_cosp, cosr_cosp);

    pitch *= rad2deg;
    yaw *= rad2deg;
    roll *= rad2deg;

    // Нормализуем углы в диапазон [-180, 180]
    const normalizeAngle = angle => ((angle + 180) % 360) - 180;

    const result = {
        x: normalizeAngle(pitch),
        y: normalizeAngle(yaw),
        z: normalizeAngle(roll)
    };

    return result;
}

function rotatePointAroundAxis(point, axisStart, axisEnd, angle) {
    // Переводим угол в радианы
    let angleRad = angle * Math.PI / 180;

    // Вычисляем вектор оси вращения
    let axis = {
        x: axisEnd.x - axisStart.x,
        y: axisEnd.y - axisStart.y,
        z: axisEnd.z - axisStart.z
    };

    // Нормализуем вектор оси
    let axisLength = Math.sqrt(axis.x * axis.x + axis.y * axis.y + axis.z * axis.z);
    let unitAxis = {
        x: axis.x / axisLength,
        y: axis.y / axisLength,
        z: axis.z / axisLength
    };

    // Создаем кватернион вращения
    let sinHalfAngle = Math.sin(angleRad / 2);
    let rotationQuaternion = {
        w: Math.cos(angleRad / 2),
        x: unitAxis.x * sinHalfAngle,
        y: unitAxis.y * sinHalfAngle,
        z: unitAxis.z * sinHalfAngle
    };

    // Переносим точку относительно начала оси вращения
    let translatedPoint = {
        x: point.x - axisStart.x,
        y: point.y - axisStart.y,
        z: point.z - axisStart.z
    };

    // Создаем кватернион из точки
    let pointQuaternion = {w: 0, x: translatedPoint.x, y: translatedPoint.y, z: translatedPoint.z};

    // Выполняем вращение
    let rotatedQuaternion = quaternionMultiply(
        quaternionMultiply(rotationQuaternion, pointQuaternion),
        {w: rotationQuaternion.w, x: -rotationQuaternion.x, y: -rotationQuaternion.y, z: -rotationQuaternion.z}
    );



    let initialQuat = { x: ${component.rotation.x}, y: ${component.rotation.y}, z: ${component.rotation.z}, w: ${component.rotation.w} };
    const finalQuaternion = quaternionMultiply(rotationQuaternion, initialQuat);
    
    // Преобразуем результат в углы Эйлера
    const finalEulers = quaternionToEuler(finalQuaternion);


    // Возвращаем точку обратно
    return {
        x: rotatedQuaternion.x + axisStart.x,
        y: rotatedQuaternion.y + axisStart.y,
        z: rotatedQuaternion.z + axisStart.z,
        ax: finalEulers.x,
        ay: finalEulers.y,
        az: finalEulers.z,
    };
}



// Точки, определяющие ось вращения
let axisStart = { x: ${axisStart.x}, y:  ${axisStart.y}, z:  ${axisStart.z} };
let axisEnd = { x:  ${axisEnd.x}, y:  ${axisEnd.y}, z:  ${axisEnd.z} };


// Начальная позиция детали (точка центра детали)
let initialPoint = { x: ${component.position.x}, y: ${component.position.y}, z: ${component.position.z} };
// Начальное вращение
let initialRot = { x: ${component.eulers.x}, y: ${component.eulers.y}, z: ${component.eulers.z} };
let initialQuat = { x: ${component.rotation.x}, y: ${component.rotation.y}, z: ${component.rotation.z}, w: ${component.rotation.w} };

// Выполняем поворот
let newPosition = rotatePointAroundAxis(initialPoint, axisStart, axisEnd, A);

B =  newPosition.x;
C =  newPosition.y;
D =  newPosition.z;

E =  newPosition.ax;
F =  newPosition.ay;
G =  newPosition.az;

`;}

function createNodeSummCustom(inputGuid, order, x = -800, y_step = 100, script = "B = A == \"Да\";") {
    return  {
        "guid": newGuid(),
        "name": "Сумматор",
        "color": "#ff5e5e",
        "position": {
            "x": x,
            "y": order*y_step
        },
        "method": {
            "name": "SumRun",
            "arguments": [
                {
                    "name": "positive_variables",
                    "value": [
                        {
                            "type": 2,
                            "key": "A",
                            "value": {
                                "node_guid": inputGuid,
                                "pair_key": null
                            }
                        }
                    ],
                    "type": 18
                },
                {
                    "name": "negative_variables",
                    "value": [],
                    "type": 18
                },
                {
                    "name": "script",
                    "value": script,
                    "type": 19
                }
          ],
          "result": {
                "name": null,
                "value": [
                    {
                        "type": 0,
                        "key": "Σ",
                        "value": 0
                    },
                    {
                        "type": 0,
                        "key": "B",
                        "value": null
                    },
                ],
                "type": 18
            }
        },
        "order": order
    }
}


function createNodeSumm(inputGuid, order, axisStart, axisEnd, component) {
    return  {
        "guid": newGuid(),
        "name": "Сумматор",
        "color": "#ff5e5e",
        "position": {
            "x": 800,
            "y": order*100
        },
        "method": {
            "name": "SumRun",
            "arguments": [
                {
                    "name": "positive_variables",
                    "value": [
                        {
                            "type": 2,
                            "key": "A",
                            "value": {
                                "node_guid": inputGuid,
                                "pair_key": null
                            }
                        }
                    ],
                    "type": 18
                },
                {
                    "name": "negative_variables",
                    "value": [],
                    "type": 18
                },
                {
                    "name": "script",
                    "value": getScriptContent(axisStart, axisEnd, component),
                    "type": 19
                }
          ],
          "result": {
                "name": null,
                "value": [
                    {
                        "type": 0,
                        "key": "Σ",
                        "value": 0
                    },
                    {
                        "type": 0,
                        "key": "B",
                        "value": component.position.x
                    },
                    {
                        "type": 0,
                        "key": "C",
                        "value": component.position.y
                    },
                    {
                        "type": 0,
                        "key": "D",
                        "value": component.position.z
                    },
                    {
                        "type": 0,
                        "key": "E",
                        "value": component.eulers.x
                    },
                    {
                        "type": 0,
                        "key": "F",
                        "value": component.eulers.y
                    },
                    {
                        "type": 0,
                        "key": "G",
                        "value": component.eulers.z
                    }
                ],
                "type": 18
            }
        },
        "order": order
    }
}

function createNodeSummForTransition(inputGuid, order, axisStart, axisEnd, component) {
    return  {
        "guid": newGuid(),
        "name": "Сумматор",
        "color": "#ff5e5e",
        "position": {
            "x": 800,
            "y": order*100
        },
        "method": {
            "name": "SumRun",
            "arguments": [
                {
                    "name": "positive_variables",
                    "value": [
                        {
                            "type": 2,
                            "key": "A",
                            "value": {
                                "node_guid": inputGuid,
                                "pair_key": null
                            }
                        }
                    ],
                    "type": 18
                },
                {
                    "name": "negative_variables",
                    "value": [],
                    "type": 18
                },
                {
                    "name": "script",
                    "value": `

    // Точки, определяющие ось вращения
    let axisStart = { x:  ${axisStart.x}, y:  ${axisStart.y}, z:  ${axisStart.z} };
    let axisEnd = { x:  ${axisEnd.x}, y:  ${axisEnd.y}, z:  ${axisEnd.z} };

    let axisVector = {
        x: axisEnd.x - axisStart.x,
        y: axisEnd.y - axisStart.y,
        z: axisEnd.z - axisStart.z
    };

    let offset = {
        x: axisVector.x * A/100,
        y: axisVector.y * A/100,
        z: axisVector.z * A/100,
    };

    B = ${component.position.x} + offset.x;
    C = ${component.position.y} + offset.y;
    D = ${component.position.z} + offset.z;

                    `,
                    "type": 19
                }
          ],
          "result": {
                "name": null,
                "value": [
                {
                    "type": 0,
                    "key": "Σ",
                    "value": 0
                },
                {
                    "type": 0,
                    "key": "B",
                    "value": 2
                },
                {
                    "type": 0,
                    "key": "C",
                    "value": 3
                },
                {
                    "type": 0,
                    "key": "D",
                    "value": 4
                }
                ],
                "type": 18
            }
        },
        "order": order
    }
}

function createNodeSetDetailInfo(partName, partNamePath, summGuid, order) {
    return  {
        "guid": newGuid(),
        "name": "Задать параметр детали",
        "color": "#788cff",
        "position": {
            "x": 1600,
            "y": order*100
        },
        "method": {
            "name": "SetComponentsFields",
            "arguments": [
                {
                    "name": "components",
                    "value": [
                        {
                        "type": 0,
                        "key": partName,
                        "value": partNamePath
                        }
                    ],
                    "type": 18
                },
                {
                    "name": "fields",
                    "value": [
                        {
                            "type": 2,
                            "key": "position.x",
                            "value": {
                                "node_guid": summGuid,
                                "pair_key": "B"
                            }
                        },
                        {
                            "type": 2,
                            "key": "position.y",
                            "value": {
                                "node_guid": summGuid,
                                "pair_key": "C"
                            }
                        },
                        {
                            "type": 2,
                            "key": "position.z",
                            "value": {
                                "node_guid": summGuid,
                                "pair_key": "D"
                            }
                        }
                    ],
                    "type": 18
                }
            ],
            "result": {
                "name": null,
                "value": null,
                "type": 0
            }
        },
        "order": 3
    }
}

function createNodeSetDetailActivePart(component) {
    return {
        "type": 0,
        "order": 0,
        "key": component.name,
        "value": component.path + '/' + component.name
    }
}

function createNodeSetDetailsActive(components, summGuid, order, x = -1600, y_step = 100) {
    const details = [];
    for (let i = 0; i < components.length; i++) {
        details.push(createNodeSetDetailActivePart(components[i]))
    }

    return  {
        "guid": newGuid(),
        "name": "Задать параметр детали",
        "color": "#788cff",
        "position": {
            "x": x,
            "y": order*y_step
        },
        "method": {
            "name": "SetComponentsFields",
            "arguments": [
                {
                    "name": "components",
                    "value": details,
                    "type": 18
                },
                {
                    "name": "fields",
                    "value": [
                        {
                            "type": 2,
                            "key": "is_active",
                            "value": {
                                "node_guid": summGuid,
                                "pair_key": "B"
                            }
                        },
                    ],
                    "type": 18
                }
            ],
            "result": {
                "name": null,
                "value": null,
                "type": 0
            }
        },
        "order": 3
    }
}

function getNewComponentPosition(obj) {
    var prop1 = obj.GabMax;
    var prop2 = obj.GabMin;

    var xx = (prop1.x + prop2.x) / 2;
    var yy = (prop1.y + prop2.y) / 2;
    var zz = (prop1.z + prop2.z) / 2;

    return {
        "x": -xx,
        "y": yy,
        "z": zz
    };
}

function determineAnimationType(obj) {
    // let axisStart = obj.ToGlobal(obj.Animation.AxisStart);
    // let axisEnd = obj.ToGlobal(obj.Animation.AxisEnd);
    let axisStart = (obj.Animation.AxisStart);
    let axisEnd = (obj.Animation.AxisEnd);

    // Вычисляем разницы по модулю между координатами
    let diffX = Math.abs( Math.abs(axisEnd.x) - Math.abs(axisStart.x) );
    let diffY = Math.abs( Math.abs(axisEnd.y) - Math.abs(axisStart.y) );
    let diffZ = Math.abs( Math.abs(axisEnd.z) - Math.abs(axisStart.z) );

    let maxDiff = Math.max(diffX, diffY, diffZ);

    if (obj.AnimationType == 1) { // Ротация
        if (maxDiff === diffY) {
            // Вращение вокруг оси Y
            if (axisStart.y > axisEnd.y) {
                return 2; // От большего к меньшему
            } else {
                return 3; // От меньшего к большему
            }
        }
        else if (maxDiff === diffX) {
            // Вращение вокруг оси X
            if (axisStart.x > axisEnd.x) {
                return 5; // От большего к меньшему
            } else {
                return 4; // От меньшего к большему
            }
        }
        else {
            return 2; // default
        }
    } 
    else if (obj.AnimationType == 2) { // Трансляция
        if (maxDiff === diffZ) {
            return 8; // Движение по Z (от меньшего к большему при енде)
        } 
        else if (maxDiff === diffX) {
            if (axisStart.x < axisEnd.x) {
                return 6; // По X от меньшего к большему при енде
            } else {
                return 7; // По X от большего к меньшему при енде
            }
        }
        else {
            return 6; // default
        }
    }
}

function getAnimationPosition(obj) {
    var prop1 = obj.GabMax;
    var prop2 = obj.GabMin;

    var centerX = (prop1.x + prop2.x) / 2;
    var centerY = (prop1.y + prop2.y) / 2;
    var centerZ = (prop1.z + prop2.z) / 2;

    let axisStartOld = obj.ToGlobal(obj.Animation.AxisStart)
    let axisEndOld = obj.ToGlobal(obj.Animation.AxisEnd)

    var axisStartDelta = {
        x: axisStartOld.x - centerX,
        y: axisStartOld.y - centerY,
        z: axisStartOld.z - centerZ
    };

    var axisEndDelta = {
        x: axisEndOld.x - centerX,
        y: axisEndOld.y - centerY,
        z: axisEndOld.z - centerZ
    };

    // Вычисляем новые координаты центра в новой системе
    var newCenterX = -centerX;
    var newCenterY = centerY;
    var newCenterZ = centerZ;

    // Вычисляем новые координаты axisStart и axisEnd
    let newAxisStart = {
        x: newCenterX - axisStartDelta.x,
        y: newCenterY + axisStartDelta.y,
        z: newCenterZ + axisStartDelta.z
    };

    let newAxisEnd = {
        x: newCenterX - axisEndDelta.x,
        y: newCenterY + axisEndDelta.y,
        z: newCenterZ + axisEndDelta.z
    }


    let angle = obj.Animation.DoorAngle
    let doorAngle = {
        min: 0,
        max: 0,
    }

    // Invert ??
    let finalAxisStart = newAxisStart
    let finalAxisEnd = newAxisEnd

    if (
        obj.AnimType == 2
        || obj.AnimType == 4
    ) {
        finalAxisStart = newAxisEnd
        finalAxisEnd = newAxisStart
        doorAngle.max += angle

    } else if (
        obj.AnimType == 3
        || obj.AnimType == 5
    ) {
        finalAxisStart = newAxisStart
        finalAxisEnd = newAxisEnd
        doorAngle.min -= angle
    }

    return {
        center: {
            x: newCenterX,
            y: newCenterY,
            z: newCenterZ
        },
        axisStart: finalAxisStart,
        axisEnd: finalAxisEnd,
        doorAngle: doorAngle,
    };
}


// mod = Model[0]
// console.log(mod.Name)
// console.log('---LINE:')
// modc = mod.Contour[3]
// console.log('---start end line:--------------')
// console.log(modc.Pos1)
// console.log(modc.Pos2)
// modcDb = modc.Data.Butt
// console.log('---KROMKA params:--------------')
// console.log(modcDb.ElemIndex)
// console.log(modcDb.Thickness)

function findEdgePositions(contour) {
    // Объект для хранения индексов элементов контура: какой индекс соответствует какой стороне
    let positions = {
        left: null,   // Будет содержать индекс левой линии
        right: null,  // Будет содержать индекс правой линии
        top: null,    // Будет содержать индекс верхней линии
        bottom: null  // Будет содержать индекс нижней линии
    };
    let maxX = -Infinity;
    let minX = Infinity;
    let maxY = -Infinity;
    let minY = Infinity;
    // Сначала найдем максимальные и минимальные координаты
    for (let i = 0; i < 4; i++) {
        let line = contour[i];
        
        if (
            !line
            || !line.Pos1
            || !line.Pos1.x
            || !line.Pos1.y
            || !line.Pos2.x
            || !line.Pos2.y
        ) {
            continue;
        }
        
        let x1 = line.Pos1.x;
        let x2 = line.Pos2.x;
        let y1 = line.Pos1.y;
        let y2 = line.Pos2.y;
        maxX = Math.max(maxX, x1, x2);
        minX = Math.min(minX, x1, x2);
        maxY = Math.max(maxY, y1, y2);
        minY = Math.min(minY, y1, y2);
    }
    // Теперь пройдем по всем линиям и определим их положение
    for (let i = 0; i < 4; i++) {
        let line = contour[i];
        
        if (
            !line
            || !line.Pos1
            || !line.Pos1.x
            || !line.Pos1.y
            || !line.Pos2.x
            || !line.Pos2.y
        ) {
            continue;
        }
        
        let x1 = line.Pos1.x;
        let x2 = line.Pos2.x;
        let y1 = line.Pos1.y;
        let y2 = line.Pos2.y;
        // Если x координаты совпадают - это вертикальная линия
        if (Math.abs(x1 - x2) < 0.1) {
            if (Math.abs(x1 - minX) < 0.1) {
                positions.left = i;  // Это левая линия
            }
            if (Math.abs(x1 - maxX) < 0.1) {
                positions.right = i; // Это правая линия
            }
        }
        // Если y координаты совпадают - это горизонтальная линия
        if (Math.abs(y1 - y2) < 0.1) {
            if (Math.abs(y1 - minY) < 0.1) {
                positions.bottom = i; // Это нижняя линия
            }
            if (Math.abs(y1 - maxY) < 0.1) {
                positions.top = i;    // Это верхняя линия
            }
        }
    }
    return positions;
}

// // Пример использования:
// let positions = findEdgePositions(mod.Contour);
// console.log('Нижняя кромка находится в элементе с индексом:', positions.bottom);
// console.log('Правая кромка находится в элементе с индексом:', positions.right);
// console.log('Верхняя кромка находится в элементе с индексом:', positions.top);
// console.log('Левая кромка находится в элементе с индексом:', positions.left);



function createSpecialComponent(obj, index, parentRotation = null) {
    let component = {};

    component.position = getNewComponentPosition(obj)

    // let localRotation = {
    //     x: obj.Rotation.ImagPart.x,
    //     y: -obj.Rotation.ImagPart.y,
    //     z: -obj.Rotation.ImagPart.z,
    //     w: obj.Rotation.RealPart
    // };
    // component.rotation = parentRotation 
    //     ? multiplyQuaternions(parentRotation, localRotation) 
    //     : localRotation;

    component.rotation = {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0,
        "w": 1.0
    },
    component.eulers = quaternionToEuler(component.rotation)
    
    component.size = {
        "x": obj.TextureOrientation == ftoVertical ? obj.GSize.x : obj.GSize.x,
        "y": obj.TextureOrientation == ftoVertical ? obj.GSize.y : obj.GSize.y,
        "z": obj.GSize.z // obj.Thickness
    };

    component.color = null;
    component.ignore_bounds = true;
    component.bake = null;
    component.processings = [];
    component.is_active = true;
    component.max_texture_size = 512;
    component.build_order = index;
    component.detailing_order = index;
    component.order = index;
    component.positioning_points = [];
    component.name = obj.Name + index;
    component.path = "Детали";
    component.guid = newGuid();
    
    // Something to do with materials ... it's a mess
    let matIndex = colors.findIndex(el => el == obj.Material.MaterialName);
    if ( matIndex == -1) {
        colors.push(obj.Material.MaterialName);
        details.push([component.path+'/'+component.name]);
    } else {
        details[matIndex].push(component.path+'/'+component.name);
    };
    let materialGUID = getMaterialGuid(obj.Material.MaterialName, component);

    component.material = "s123mat://" + materialGUID


    // Butts:
    let buttsInfo = applyButts(obj);
    component.user_data = buttsInfo;
    // let buttsMaterial // TODO:

    exportPanelAndButts(obj, index)


    component.modifier = {
        "file": `file://merged_panel_${index}.fbx`,
        "materials": [
            component.material,
            component.material
        ],
        "nodes":  [
            'node1',
            'node2'
            
        ],
        "type": 16
    };

    component.full_path = component.path+'/'+component.name

    return component
}

function createComponent(obj, index, parentRotation = null) {
    let component = {};

    component.position = getNewComponentPosition(obj)

    let localRotation = {
        x: obj.Rotation.ImagPart.x,
        y: -obj.Rotation.ImagPart.y,
        z: -obj.Rotation.ImagPart.z,
        w: obj.Rotation.RealPart
    };
    component.rotation = parentRotation 
        ? multiplyQuaternions(parentRotation, localRotation) 
        : localRotation;

    component.eulers = quaternionToEuler(component.rotation)
    
    component.size = {
        "x": obj.TextureOrientation == ftoVertical ? obj.GSize.x : obj.GSize.x,
        "y": obj.TextureOrientation == ftoVertical ? obj.GSize.y : obj.GSize.y,
        "z": obj.Thickness
    };

    component.color = null;
    component.ignore_bounds = true;
    component.bake = null;
    component.processings = [];
    component.is_active = true;
    component.max_texture_size = 512;
    component.build_order = index;
    component.detailing_order = index;
    component.order = index;
    component.user_data = null;
    component.positioning_points = [];
    component.name = obj.Name + index;
    component.path = "Детали";
    component.guid = newGuid();
    
    // Something to do with materials ... it's a mess
    let matIndex = colors.findIndex(el => el == obj.Material.MaterialName);
    if ( matIndex == -1) {
        colors.push(obj.Material.MaterialName);
        details.push([component.path+'/'+component.name]);
    } else {
        details[matIndex].push(component.path+'/'+component.name);
    };
    let materialGUID = getMaterialGuid(obj.Material.MaterialName, component);

    component.material = "s123mat://" + materialGUID

    // Kromki
    let arrKromok = [0, 0, 0, 0];
    let arrKromokZ = [0, 0, 0, 0];

    // Определяем расположение элементов контура
    let positions = findEdgePositions(obj.Contour);

    // Обходим контур и проверяем наличие кромок
    for (let i = 0; i < 4; i++) {
        // Смотрим есть ли кромка в элементе
        let butt = obj.Contour[i].Data.Butt;
        if (butt) { // если кромка существует
            // Определяем в какой индекс массива положить эту кромку
            let newIndex;
            if (i === positions.left) newIndex = 0;      // Левая кромка - первый элемент
            else if (i === positions.top) newIndex = 1;  // Верхняя кромка - второй элемент  
            else if (i === positions.right) newIndex = 2; // Правая кромка - третий элемент
            else if (i === positions.bottom) newIndex = 3; // Нижняя кромка - четвертый элемент

            // Записываем информацию о кромке
            arrKromok[newIndex] = butt.Thickness == 0.4 ? 1 : 2;
            arrKromokZ[newIndex] = butt.Thickness;
        }
    }


    // for (let k = 0; k < obj.Butts.Count; k++) {
    //     arrKromok[obj.Butts.Butts[k].ElemIndex] = obj.Butts.Butts[k].Thickness == 0.4 ? 1 : 2;
    //     arrKromokZ[obj.Butts.Butts[k].ElemIndex] = obj.Butts.Butts[k].Thickness;
    // };

    component.modifier = {
        "cut_angle1": 0.0,
        "cut_angle2": 0.0,
        "back_material": component.material,
        "edges": [{
            "type": arrKromok[0],
            "material": component.material,
            "size": {
                "x": component.size.z,
                "y": 1000.0,
                "z": arrKromokZ[0]
            }

        }, {
            "type": arrKromok[1],
            "material": component.material,
            "size": {
                "x": component.size.z,
                "y": 1000.0,
                "z": arrKromokZ[1]
            }

        }, {
            "type": arrKromok[2],
            "material": component.material,
            "size": {
                "x": component.size.z,
                "y": 1000.0,
                "z": arrKromokZ[2]
            }

        }, {
            "type": arrKromok[3],
            "material": component.material,
            "size": {
                "x": component.size.z,
                "y": 1000.0,
                "z": arrKromokZ[3]
            }

        }],

        "type": 9
    };

    component.full_path = component.path+'/'+component.name

    return component
}

let meshCache = new Map();

function getMeshCacheKey(obj) {
    let count = 0;
    
    // get vertices
    function countRecursive(item) {
        if (item.TriListsCount) {
            for(let i = 0; i < item.TriListsCount; i++) {
                count += item.TriLists[i].Count * 3;
            }
        }
        
        if (item.List) {
            for(let i = 0; i < item.Count; i++) {
                countRecursive(item.Objects[i]);
            }
        }
    }
    
    countRecursive(obj);

    // get orientation
    function formatNumber(num) {
        return (Math.abs(parseFloat(num.toFixed(3))) < 0.001) ? "0" : num.toFixed(3);
    }
    
    function getOrientationKey(obj) {
        const localDirs = [
            {x: 1, y: 0, z: 0},
            {x: 0, y: 1, z: 0},
            {x: 0, y: 0, z: 1}
        ];

        const signs = localDirs.map(dir => {
            const global = obj.NToGlobal(dir);
            return Math.sign(global.z);
        }).join('_');
    
        return localDirs.map(dir => {
            const global = obj.NToGlobal(dir);
            return `${formatNumber(global.x)}_${formatNumber(global.y)}_${formatNumber(global.z)}`;
        }).join('_') + `_${signs}`;
    }

    const orientation = getOrientationKey(obj);

    const dims = `${Math.round(obj.GSize.x)}_${Math.round(obj.GSize.y)}_${Math.round(obj.GSize.z)}`;

    return `${obj.Name}_${count}_${orientation}_${dims}`;
}

function getOrCreateMeshInfo(item, index) {
    const cacheKey = getMeshCacheKey(item);
    
    if (meshCache.has(cacheKey)) {
        return meshCache.get(cacheKey);
    }

    let vertices = [];
    let faces = [];
    let totalVertices = 0;
    
    let minX = Infinity, minY = Infinity, minZ = Infinity;
    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;
    
    function exportObject(obj) {
        if (obj.TriListsCount) {
    
            for(let i = 0; i < obj.TriListsCount; i++) {
                let triPack = obj.TriLists[i];
    
                for(let j = 0; j < triPack.Count; j++) {
                    let tri = triPack.Triangles[j];
                    
                    // Преобразуем вершины в глобальные координаты
                    let v1 = obj.ToGlobal(tri.Vertex1);
                    let v2 = obj.ToGlobal(tri.Vertex2);
                    let v3 = obj.ToGlobal(tri.Vertex3);
                    
                    // Конвертируем в метры и сразу обновляем габариты
                    const v1m = [v1.x/1000, v1.y/1000, v1.z/1000];
                    const v2m = [v2.x/1000, v2.y/1000, v2.z/1000];
                    const v3m = [v3.x/1000, v3.y/1000, v3.z/1000];

                    // Обновляем габариты
                    [v1m, v2m, v3m].forEach(v => {
                        minX = Math.min(minX, v[0]);
                        minY = Math.min(minY, v[1]);
                        minZ = Math.min(minZ, v[2]);
                        maxX = Math.max(maxX, v[0]);
                        maxY = Math.max(maxY, v[1]);
                        maxZ = Math.max(maxZ, v[2]);
                    });

                    // Сохраняем точки
                    vertices.push(v1m, v2m, v3m);
                    
                    let baseIndex = totalVertices + 1;
                    faces.push(`f ${baseIndex} ${baseIndex+1} ${baseIndex+2}`);
                    totalVertices += 3;
                }
            }
        }
        
        if (obj.List) {
            for(let i = 0; i < obj.Count; i++) {
                exportObject(obj.Objects[i]);
                system.sleep(1);
            }
        }
    }
    
    exportObject(item);

    // Обработка пустой модели
    if (vertices.length === 0) {
        return null;
        // const defaultSize = 0.0001;
        // vertices = [
        //     [0, 0, 0],
        //     [defaultSize, 0, 0],
        //     [0, defaultSize, 0]
        // ];
        // faces = ['f 1 2 3'];
        // minX = 0;
        // minY = 0;
        // minZ = 0;
        // maxX = defaultSize;
        // maxY = defaultSize;
        // maxZ = defaultSize;
    }

    // Вычисляем центр
    const center = {
        x: (minX + maxX) / 2,
        y: (minY + maxY) / 2,
        z: (minZ + maxZ) / 2
    };

    // Создаем OBJ контент со смещенными вершинами
    const objVertices = vertices.map(v => 
        `v ${v[0] - center.x} ${v[1] - center.y} ${v[2] - center.z}`
    );

    const meshName = `model_${index}`;
    const realSize = {
        x: maxX - minX,
        y: maxY - minY,
        z: maxZ - minZ
    };
    
    fs.writeFileSync(`results/${meshName}.obj`, [...objVertices, ...faces].join('\n'));

    const modelObject = {
        name: meshName,
        size: realSize,
        min: { x: minX, y: minY, z: minZ },
        max: { x: maxX, y: maxY, z: maxZ }
    };

    meshCache.set(cacheKey, modelObject);

    return modelObject;
}

function createMeshComponent(obj, index, parentRotation = null) {
    const meshInfo = getOrCreateMeshInfo(obj, index)
    if (!meshInfo) {
        return null;
    }

    let component = {};
    component.position = getNewComponentPosition(obj)
    // component.position = {
    //     "x": 0,
    //     "y": 0,
    //     "z": 0
    // };
    // let localRotation = {
    //     x: obj.Rotation.ImagPart.x,
    //     y: -obj.Rotation.ImagPart.y,
    //     z: -obj.Rotation.ImagPart.z,
    //     w: obj.Rotation.RealPart
    // };
    // component.rotation = parentRotation 
    //     ? multiplyQuaternions(parentRotation, localRotation) 
    //     : localRotation;
    // component.eulers = quaternionToEuler(component.rotation)
    component.rotation = {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0,
        "w": 1.0
    },
    component.eulers = quaternionToEuler(component.rotation)
    
    component.size = {
        "x": meshInfo.size.x*1000,
        "y": meshInfo.size.y*1000,
        "z": meshInfo.size.z*1000
    };

    component.color = null;
    component.ignore_bounds = true;
    component.bake = null;
    component.processings = [];
    component.is_active = true;
    component.max_texture_size = 512;
    component.build_order = index;
    component.detailing_order = index;
    component.order = index;
    component.user_data = null;
    component.positioning_points = [];
    component.name = obj.Name + index;
    component.path = "Детали";
    component.guid = newGuid();
    
    // Something to do with materials ...
    let materialName = obj.Material ? obj.Material.MaterialName : "default_material";
    let matIndex = colors.findIndex(el => el == materialName);
    if ( matIndex == -1) {
        colors.push(materialName);
        details.push([component.path+'/'+component.name]);
    } else {
        details[matIndex].push(component.path+'/'+component.name);
    };
    let materialGUID = getMaterialGuid(materialName, component);

    component.material = "s123mat://" + materialGUID

    component.modifier = {
        "mesh": `file://${meshInfo.name}.fbx`,
        "node_name": null,
        "use_scale": true,
        "apply_offset": false,
        "mesh_size": {
            "x": meshInfo.size.x,
            "y": meshInfo.size.y,
            "z": meshInfo.size.z
        },
        "type": 3
    };

    component.full_path = component.path+'/'+component.name

    return component
}



let usedInputNames = {}
function generateUniqueInputName(baseName, type) {
    let idx = 0;
    let inputName;
    do {
        inputName = `${baseName}${idx > 0 ? idx : ''} ${type}`;
        idx++;
    } while (usedInputNames[inputName]);

    usedInputNames[inputName] = true;
    return inputName;
}


function isBlock(item) {
    return (
        item.toString() === '[object TFurnBlock]'
        || item.toString() === '[object TLayer3D]'
    )
}

let nodesCount = 1

function processLevel(
    item, 
    depth, 
    parentRotation = null, 

    currentAnimType = null, 
    initialPoint = null, 
    axisStart = null, 
    axisEnd = null, 

    inputName = null
) {
    totalProcessed++;

    // console.log(item.Name)

    if (totalProcessed % pauseInterval === 0) {
        system.sleep(10);
    }

    let currentRotation = parentRotation;

    // BLOCK
    if (isBlock(item)) {
        let localRotation = {
            x: item.Rotation.ImagPart.x,
            y: -item.Rotation.ImagPart.y,
            z: -item.Rotation.ImagPart.z,
            w: item.Rotation.RealPart
        };
        currentRotation = parentRotation 
            ? multiplyQuaternions(parentRotation, localRotation) 
            : localRotation;



        if (!currentAnimType && (item.AnimType || item.AnimationType) && item.Count) { // set current animation if not yet (only works for level 1)
            // what to do with 1 and etc?
            // 1 - just a block
            // 9 - leg(wtf?)
            // 10 - handle
            // 11 - front panel

            if ((item.AnimType >= 2 && item.AnimType <= 5)  || item.AnimationType == 1) { // Rotate
                if (item.AnimType == 0) {
                    // item.AnimType = 2 // idk lets try 2(4), or then 3(5)
                    item.AnimType = determineAnimationType(item);
                }

                currentAnimType = item.AnimType

                const newPositions = getAnimationPosition(item)
                initialPoint = newPositions.center // this is doing nothing at all
                axisStart = newPositions.axisStart
                axisEnd = newPositions.axisEnd
                let doorAngle = newPositions.doorAngle
                
                // inputName = `${item.Name} Поворот`
                inputName = generateUniqueInputName(item.Name, "Поворот")
                const newInput = createRotateInput(inputName, doorAngle)
                inputs.push(newInput)

            } else if ((item.AnimType >= 6 && item.AnimType <= 8) || item.AnimationType == 2) { // Translate (8 - Z; 6,7 - X)
                if (item.AnimType == 0) {
                    // item.AnimType = 6 // idk 
                    item.AnimType = determineAnimationType(item);
                }
                currentAnimType = item.AnimType

                const newPositions = getAnimationPosition(item)
                axisStart = newPositions.axisStart
                axisEnd = newPositions.axisEnd

                // // get axis: 
                // // GLOBAL ?
                // axisStart = item.Animation.AxisStart // temporary
                // axisEnd = item.Animation.AxisEnd // temporary

                let offset = {min: 0, max: 100}

                // inputName = `${item.Name} Смещение`
                inputName = generateUniqueInputName(item.Name, "Смещение")
                const newInput = createTranslateInput(inputName, offset)
                inputs.push(newInput)
            }
        }
    }

    // EVERYTHING ELSE
    // } else if (
    //     item.toString() == '[object TFurnPanel]' || 
    //     item.toString() == '[object TFastener]' || 
    //     item.toString() == '[object TFurnAsm]' ||
    //     item.toString() == '[object TAsmKit]' ||
    //     item.toString() == '[object TImportedMesh]' ||
    //     item.toString() == '[object TObsoleteBentPanel]' ||
    //     item.toString() == '[object TRotationBody]' ||
    //     item.toString() == '[object TExtrusionBody]'
    // ) {
    else if (
        item.toString() != '[object TModel3D]' &&
        item.toString() != '[object TModelLimits]'
    ) {
        let component

        if (item.toString() == '[object TFurnPanel]') {
            if (!item.IsContourRectangle || item.Bent || item.Cuts.Count > 0) {
                component = createSpecialComponent(item, totalProcessed, parentRotation);
            } else {
                component = createComponent(item, totalProcessed, parentRotation);
            }

        } else {
            component = createMeshComponent(item, totalProcessed, parentRotation);
            if (!component) {
                return; // Выходим из функции если компонент null
            }
        }


        // Check for hidden/visible models
        if (hiddenModelsKeywords.some(word => item.Name.toLowerCase().includes(word.toLowerCase()))) {
            hiddenModels.push(component)

        } else if (visibleModelsKeywords.some(word => item.Name.toLowerCase().includes(word.toLowerCase()))) {
            visibleModels.push(component)
        }


        components.push(component);
        currentRotation = component.rotation;

        if (currentAnimType) { // if they are a part of the animation

            if (currentAnimType >= 2 && currentAnimType <= 5) { // Rotate

                const getInputNode = createNodeGetInput(inputName, nodesCount)
                nodes.push(getInputNode)
                nodesCount++
    
                const createSummNode = createNodeSumm(getInputNode.guid, nodesCount, axisStart, axisEnd, component)
                nodes.push(createSummNode)
                nodesCount++
    
                const createRotationNode = createNodeSetRotation(component.full_path, createSummNode.guid, nodesCount)
                nodes.push(createRotationNode)
                nodesCount++
    
                const setComponentFieldsNode = createNodeSetDetailInfo(component.name, component.full_path, createSummNode.guid, nodesCount)
                nodes.push(setComponentFieldsNode)
                nodesCount++
                

            } else if (currentAnimType >= 6 && currentAnimType <= 8) { // Translate

                const getInputNode = createNodeGetInput(inputName, nodesCount)
                nodes.push(getInputNode)
                nodesCount++
                // console.log(axisStart, axisEnd)
    
                const createSummNode = createNodeSummForTransition(getInputNode.guid, nodesCount, axisStart, axisEnd, component)
                nodes.push(createSummNode)
                nodesCount++
    
                const setComponentFieldsNode = createNodeSetDetailInfo(component.name, component.full_path, createSummNode.guid, nodesCount)
                nodes.push(setComponentFieldsNode)
                nodesCount++
            }

        }
    }



    if (
        isBlock(item)
        && item.Count
    ) {
        for (let i = 0; i < item.Count; i++) {
            processLevel(item[i], depth + 1, currentRotation, 
                currentAnimType, initialPoint, axisStart, axisEnd, inputName);
        }
    }
}





for (let i = 0; i < Model.Count; i++) {

    if (Model[i].Visible) {
        
        processLevel(Model[i], 1, null);

    };
};

// show/hide models?
if (visibleModels.length > 0) {
    const visibleModelsInputName = 'Показать фурнитуру'
    const visibleModelsInput = createEnumYesNoInput(visibleModelsInputName)
    inputs.push(visibleModelsInput)

    const getVisibleModelsInputNode = createNodeGetInput(visibleModelsInputName, 1, -300)
    nodes.push(getVisibleModelsInputNode)
    const visibleModelsSummNode = createNodeSummCustom(getVisibleModelsInputNode.guid, 1, -800)
    nodes.push(visibleModelsSummNode)

    const setComponentsActivenessNode = createNodeSetDetailsActive(visibleModels, visibleModelsSummNode.guid, 1)
    nodes.push(setComponentsActivenessNode)
}

if (hiddenModels.length > 0) {
    const hiddenModelsInputName = 'Показать крепежи'
    const hiddenModelsInput = createEnumYesNoInput(hiddenModelsInputName)
    inputs.push(hiddenModelsInput)

    const getHiddenModelsInputNode = createNodeGetInput(hiddenModelsInputName, 2, -300)
    nodes.push(getHiddenModelsInputNode)
    const hiddenModelsSummNode = createNodeSummCustom(getHiddenModelsInputNode.guid, 2, -800)
    nodes.push(hiddenModelsSummNode)

    const setComponentsActivenessNode = createNodeSetDetailsActive(hiddenModels, hiddenModelsSummNode.guid, 2)
    nodes.push(setComponentsActivenessNode)
}
//

let input = {
    "guid": "",
    "verbose_ru": null,
    "name": "Цвет ",
    "type": 7,
    "value": "",
    "settings": {
        "values": "{{MATERIAL_FOLDERS_PLACEHOLDER}}",
        "target": 3,
        "has_none": false,
        "tag": "material",
        "is_interactive": true,
        "event": null,
        "show_in_preview": false,
        "show_in_consult": true
    },
    "is_active": true,
    "is_hidden": false,
    "hint": null,
    "order": 2,
    "related": null
};

let getInputValueNode = {
    "guid": "",
    "name": "Получить вход",
    "color": "#7dff63",
    "position": {
        "x": -350,
        "y": 0
    },
    "method": {
        "name": "GetInputValue",
        "arguments": [
        {
            "name": "input",
            "value": "ЦветXXX",
            "type": 20
        }
        ],
        "result": {
        "name": null,
        "value": null,
        "type": 1
        }
    },
    "order": 1
};

let setLDSPMaterialNode = {
    "guid": "",
    "name": "Задать материал ЛДСП",
    "color": "#fff",
    "position": {
        "x": -50,
        "y": 0
    },
    "method": {
        "name": "SetLDSPMaterial",
        "arguments": [
        {
            "name": "components",
            "value": [],
            "type": 18
        },
        {
            "name": "material",
            "value": {
                "node_guid": "ГУИД ОТ ПАРЫ ПОЛУЧИТЬ ВХОД",
                "pair_key": null
            },
            "type": 2
        }
        ],
        "result": {
        "name": null,
        "value": null,
        "type": 0
        }
    },
    "order": 1
};

function createNodeSetPartMaterial(summGuid, order) {
    return  {
        "guid": newGuid(),
        "name": "Задать параметр детали",
        "color": "#788cff",
        "position": {
            "x": 2600,
            "y": order*100
        },
        "method": {
            "name": "SetComponentsFields",
            "arguments": [
                {
                    "name": "components",
                    "value": [
                    ],
                    "type": 18
                },
                {
                    "name": "fields",
                    "value": [
                        {
                            "type": 2,
                            "order": 0,
                            "key": "material",
                            "value": {
                                "node_guid": summGuid,
                                "pair_key": null
                            }
                        }
                    ],
                    "type": 18
                }
            ],
            "result": {
                "name": null,
                "value": null,
                "type": 0
            }
        },
        "order": order
    }
}

let detailsListOfColor = {
    "type": 3,
    "key": "A",
    "value": "Детали/Деталь 2"
};

colors.forEach(color => {
    //Задать вход
    let newInput = JSON.parse(JSON.stringify(input));
    newInput.guid = newGuid();
    newInput.name += colors.indexOf(color)+1;
    newInput.value = "s123mat://" + materials.get(color);
    newInput.hint = color
    ////////////////////////////Задать вход
    inputs.push(newInput);

    //Получить вход
    let newNodeGetInput = JSON.parse(JSON.stringify(getInputValueNode));
    newNodeGetInput.guid = newGuid();
    newNodeGetInput.position.y += colors.indexOf(color)*200;
    newNodeGetInput.method.arguments[0].value = newInput.name;
    newNodeGetInput.order = colors.indexOf(color)+1;
    ////////////////////////////Получить вход
    nodes.push(newNodeGetInput);

    //Задать материал LDSP
    let newNodeSetLDSPMaterial = JSON.parse(JSON.stringify(setLDSPMaterialNode));
    newNodeSetLDSPMaterial.guid = newGuid();
    newNodeSetLDSPMaterial.position.y += colors.indexOf(color)*200;
    newNodeSetLDSPMaterial.method.arguments[1].value.node_guid = newNodeGetInput.guid;

    for (let i = 0; i < details[colors.indexOf(color)].length; i++) {
        let newDetailsListOfColor = JSON.parse(JSON.stringify(detailsListOfColor));
        newDetailsListOfColor.key = String.fromCharCode(97 + i).toUpperCase();
        newDetailsListOfColor.value =  details[colors.indexOf(color)][i];
        newNodeSetLDSPMaterial.method.arguments[0].value.push(newDetailsListOfColor);
    };

    newNodeSetLDSPMaterial.order = colors.indexOf(color)+1;
    //Задать материал MODELS
    let newNodeSetPartMaterial = createNodeSetPartMaterial(newNodeGetInput.guid, colors.indexOf(color));

    for (let i = 0; i < details[colors.indexOf(color)].length; i++) {
        let newDetailsListOfColor = JSON.parse(JSON.stringify(detailsListOfColor));
        newDetailsListOfColor.key = String.fromCharCode(97 + i).toUpperCase();
        newDetailsListOfColor.value =  details[colors.indexOf(color)][i];
        newNodeSetPartMaterial.method.arguments[0].value.push(newDetailsListOfColor);
    };

    newNodeSetPartMaterial.order = colors.indexOf(color);
    ////////////////////////////Задать материал
    nodes.push(newNodeSetLDSPMaterial);
    nodes.push(newNodeSetPartMaterial);
});




let project = {
    "virtual_objects": [],
    "type": null,
    "background_color": "",
    "anchor_x": 2,
    "anchor_y": 1,
    "anchor_z": 2,
    "offset": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
    },
    "normal": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
    },
    "graph": {
        "inputs": inputs,
        "outputs": [],
        "nodes": nodes,
        "related_inputs": {},
        "comments": [],
        "is_active": true,
        "position": {
            "x": 0.0,
            "y": 0.0
        },
        "scale": 1.0
    },
    "components": components,
    "connection_points": []
};



// Скрыть вспомогательные объекты
Action.Control.Owner.Owner.FindComponent('a3Select2DElems').Execute();
Action.Control.Owner.Owner.FindComponent('a3SelectAuxLines').Execute();
for(i=0; i < Model.SelectionCount; i++) {
    Model.Selections[i].Visible = false;
}

SetCamera(p3dLeft) // always set this shit first, so we could make multiple screenshot from diff angles. Otherwise the script freeezes and all screenshots are the same
Action.DS.Camera.AngleX = 20;
Action.DS.Camera.AngleY = 20;
Action.DS.Perspective = true;
Action.DS.ViewAll();

Model.DS.DrawMode = 4;
Model.DS.LineSmooth = true;
Model.DS.ModelAccuracy = 0;

Action.Control.DS.ModelAccuracy = 0;
Action.Control.Background.Mode = 0;

Action.Control.SavePicture('results/main_icon.jpg')



// Generate 32 images
let initialAngleY = 20;
let angleStep = 360 / 10;
for (let i = 0; i < 10; i++) {
    let newAngleY = initialAngleY + (i * angleStep);
    SetCamera(p3dLeft) // always set this shit first, so we could make multiple screenshot from diff angles. Otherwise the script freeezes and all screenshots are the same
    Action.DS.Camera.AngleX = 20;
    Action.DS.Camera.AngleY = newAngleY;
    Action.Control.SavePicture(`results/sequence_${i}.jpg`);
}


// let fs = require('fs');
fs.writeFileSync('results/project.s123proj', JSON.stringify(project, null, 2));